{"name":"pigments","main":"./lib/pigments","version":"0.12.0","description":"A package to display colors in project and files.","keywords":["colors","palette","less","sass","scss","css","stylus"],"repository":{"type":"git","url":"git+https://github.com/abe33/atom-pigments.git"},"license":"MIT","engines":{"atom":">=0.174.0 <2.0.0"},"dependencies":{"underscore-plus":"1.x","fs-plus":"2.x","async":"0.2.6","css-color-function":"0.1.x","minimatch":"0.3.x","delegato":"^1.0.0","atom-utils":">=0.5.0"},"devDependencies":{"temp":"~0.8.1"},"providedServices":{"autocomplete.provider":{"versions":{"2.0.0":"provideAutocomplete"}},"pigments.api":{"versions":{"1.0.0":"provideAPI"}}},"readme":"[![Build Status](https://travis-ci.org/abe33/atom-pigments.svg?branch=master)](https://travis-ci.org/abe33/atom-pigments)\n\n## <img src='https://cdn.rawgit.com/abe33/atom-pigments/master/resources/logo.svg' width='320' height='80'>\n\nA package to display colors in project and files:\n\n![Screenshot](https://github.com/abe33/atom-pigments/blob/master/resources/pigments.gif?raw=true)\n\n## Install\n\nUsing `apm`:\n\n```\napm install pigments\n```\n\nOr search for `pigments` in Atom settings view.\n\n## Commands\n\n**Note:** Pigments doesn't define any keybindings for the provided commands, instead it'll let you define your own keybindings.\n\n### Pigments: Show Palette\n\nYou can display the project's palette through the `Pigments: Show Palette` command from the command palette:\n\n![Screenshot](https://github.com/abe33/atom-pigments/blob/master/resources/palette.gif?raw=true)\n\nThe project palette is made of all the colors that are affected to a variable, which means it won't display hardcoded colors affected to a CSS property. If you want to find every colors used in a project, including the hardcoded colors in CSS files, use the `Pigments: Find Colors` instead.\n\nPatterns for Less, Sass, Scss and Stylus variables are currently supported, which includes:\n\n```stylus\nmy-var = #123456 // stylus\n```\n```sass\n$my-var: #123456 // sass\n$my-var: #123456; // scss\n```\n```css\n@my-var: #123456; /* less */\n\n```\n\nAs with every commands, this command can be triggered using the keyboard by defining a keybinding like this:\n\n```coffee\n'atom-workspace':\n  'alt-shift-p': 'pigments:show-palette'\n```\n\n### Pigments: Find Colors\n\nYou can search for all colors in your project using the `Pigments: Find Colors` command from the command palette:\n\n![Screenshot](https://github.com/abe33/atom-pigments/blob/master/resources/search.gif?raw=true)\n\nThe results will include colors declared in variables, places where the color variables are used as well as hardcoded color values in every files that matches one of the patterns defined in both `pigments.sourceNames` and `pigments.extendedSearchNames` settings.\n\nBy default this includes:\n\n```\n**/*.css\n**/*.less\n**/*.scss\n**/*.sass\n**/*.styl\n**/*.stylus\n```\n\nThis command can be triggered using the keyboard by defining a keybinding like this:\n\n```coffee\n'atom-workspace':\n  'alt-shift-f': 'pigments:find-colors'\n```\n\n### Pigments: Convert To Hexadecimal/Pigments: Convert to RGB(A)\n\nIt evaluates and replace a color by either its hexadecimal notation or rgb/rgba notation.\nAccessible from the command palette or by right clicking on a color.\n\n![pigments-conversion](https://github.com/abe33/atom-pigments/blob/master/resources/context-menu-conversion.gif?raw=true)\n\nThese commands can be triggered using the keyboard by defining a keybinding like this:\n\n```coffee\n'atom-workspace':\n  'alt-shift-h': 'pigments:convert-to-hex'\n  'alt-shift-g': 'pigments:convert-to-rgb'\n  'alt-shift-j': 'pigments:convert-to-rgba'\n```\n\nWhen triggered from the command palette or from the keyboard, the conversion will operate on every cursors positioned on color markers.\n\n### Pigments: Reload\n\nThis command will force a reload of all variables in the project, this can be useful when the serialized state of the plugin contains invalid data and you want to get rid of them without having to touch to the content of the `.atom/storage` directory.\n\nThis command can be triggered using the keyboard by defining a keybinding like this:\n\n```coffee\n'atom-workspace':\n  'alt-shift-r': 'pigments:reload'\n```\n\n## Settings\n\n### Source Names\n\nAn array of glob patterns of the files to use as source for the project's variables and colors.\n\n* Key: `pigments.sourceNames`\n* Default: `['**/*.styl', '**/*.stylus', '**/*.less', '**/*.sass', '**/*.scss']`\n\n### Ignored Names\n\nAn array of glob patterns of the files to ignore as source files for the project's variables and colors.\n\n* Key: `pigments.ignoredNames`\n* Default: `['node_modules/*']`\n\n### Extended Search Names\n\nAn array of glob patterns of files to include in the `Pigments: Find Colors` scanning process.\n\n* Key: `pigments.extendedSearchNames`\n* Default: `['**/*.css']`\n\n### Ignored Scopes\n\nAn array of regular expressions strings to match scopes to ignore when rendering colors in a text editor.\n\nFor instance, if you want to ignore colors in comments and strings in your source files, use the following value:\n\n```\n\\.comment, \\.string\n```\n\nAs you can notice, the `.` character in scopes are escaped. This is due to the fact that this setting uses javascript `RegExp` to test the token's scope and the `.` is used to match against any character.\n\nFor instance, to ignores colors in html attributes you can use the following expression:\n\n```\n\\.text\\.html(.*)\\.string\n```\n\nNote the `(.*)` in the middle of the expression. It'll ensure that we're searching for the `.string` scope in the `.text.html` grammar even if there's other scope between them by catching any character between the two classnames.\n\nTo find which scope is applied at a given position in a buffer you can use the `editor:log-cursor-scope` command. From that you'll be able to determine what expression to use to match the scope.\n\n* Key: `pigments.ignoredScopes`\n* Default: `[]`\n\n### Autocomplete Scopes\n\nThe autocomplete provider will only complete color names in editors whose scope is present in this list.\n\n* Key: `pigments.autocompleteScopes`\n* Default: `['.source.css', '.source.css.less', '.source.sass', '.source.css.scss', '.source.stylus']`\n\n### Extend Autocomplete To Variables\n\nWhen enabled, the autocomplete provider will also provides completion for non-color variables.\n\n* Key: `pigments.extendAutocompleteToVariables`\n* Default: `false`\n\n### Traverse Into Symlink Directories\n\nWhether to traverse symlinked directories to find source files or not.\n\n* Key: `pigments.traverseIntoSymlinkDirectories`\n* Default: `false`\n\n### Ignore VCS Ignored Paths\n\nWhen this setting is enabled, every files that are ignored by the VCS will also be ignored in Pigments. That means they'll be excluded when searching for colors and when building the project palette.\n\n* Key: `pigments.ignoreVcsIgnoredPaths`\n* Default: `true`\n\n### Marker Type\n\nDefines the render mode of color markers. The possible values are:\n\n<table>\n  <tr>\n    <th>background</th>\n    <th>outline</th>\n    <th>underline</th>\n  </tr>\n  <tr>\n    <td>\n      <img src='https://github.com/abe33/atom-pigments/blob/master/resources/background-renderer.png?raw=true'/>\n    </td>\n    <td>\n      <img src='https://github.com/abe33/atom-pigments/blob/master/resources/outline-renderer.png?raw=true'/>\n    </td>\n    <td>\n      <img src='https://github.com/abe33/atom-pigments/blob/master/resources/underline-renderer.png?raw=true'/>\n    </td>\n  </tr>\n  <tr>\n    <th>dot</th>\n    <th>square-dot</th>\n  </tr>\n  <tr>\n    <td>\n      <img src='https://github.com/abe33/atom-pigments/blob/master/resources/dot-renderer.png?raw=true'/>\n    </td>\n    <td>\n      <img src='https://github.com/abe33/atom-pigments/blob/master/resources/square-dot-renderer.png?raw=true'/>\n    </td>\n  </tr>\n</table>\n\n* Key: `pigments.markerType`\n* Default: `'background'`\n\n### Sort Palette Colors\n\nThe type of sorting applied to the colors in the palette view. It can be changed directly from the palette view.\n\n* Key: `pigments.sortPaletteColors`\n* Default: `'none'`\n\n### Group Palette Colors\n\nDefines how the colors are grouped together in the palette view. It can be changed directly from the palette view.\n\n* Key: `pigments.groupPaletteColors`\n* Default: `'none'`\n\n### Merge Duplicates\n\nDefines whether to merge colors duplicates together as a single result in the palette view. It can be changed directly from the palette view.\n\n* Key: `pigments.mergeDuplicates`\n* Default: `false`\n\n### Delay Before Scan\n\nPigments rescans the text buffer once you stopped editing it, however as the process can be sometime expensive, it'll apply an extra delay after the dispatch of the `did-stop-changing` event before starting the scanning process. This setting define the number of milliseconds to wait after the `did-stop-changing` event before starting to scan the buffer again. If your start typing in the buffer again in this interval, the rescan process will be aborted.\n\n* Key: `pigments.delayBeforeScan`\n* Default: `500` (ms)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/abe33/atom-pigments/issues"},"homepage":"https://github.com/abe33/atom-pigments#readme","_id":"pigments@0.12.0","_shasum":"7a466d2873bb7f2e7a6d1b661c1865d0746dccb3","_resolved":"file:../d-115729-90251-iqbiaa/package.tgz","_from":"../d-115729-90251-iqbiaa/package.tgz"}