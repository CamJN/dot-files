'name': 'Rust'
'scopeName': 'source.rust'
'fileTypes': [
  'rs'
]

'repository': {
  'block_doc_comment': {
    'comment': 'Block documentation comment'
    'name': 'comment.block.documentation.rust'
    'begin': '/\\*[!\\*][^\\*]'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'block_comment': {
    'comment': 'Block comment'
    'name': 'comment.block.rust'
    'begin': '/\\*'
    'end': '\\*/'
    'patterns': [
      { 'include': '#block_doc_comment' }
      { 'include': '#block_comment' }
    ]
  }
  'line_doc_comment': {
    'comment': 'Single-line documentation comment'
    'name': 'comment.line.documentation.rust'
    'begin': '//[!/][^/]'
    'end': '$'
  }
  'line_comment': {
    'comment': 'Single-line comment'
    'name': 'comment.line.double-slash.rust'
    'begin': '//'
    'end': '$'
  }
  'escaped_character': {
    'name': 'constant.character.escape.rust'
    'match': '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
  }
  'sigils': {
    'comment': 'Sigil'
    'name': 'keyword.operator.sigil.rust'
    'match': '[&*](?=[a-zA-Z0-9_\\(\\[\\|\\"]+)'
  }
  'raw_string_literal': {
    'comment': 'Raw double-quote string'
    'name': 'string.quoted.double.raw.rust'
    'match': 'r(#*)".*?"(\\1)'
  }
  'string_literal': {
    'comment': 'Double-quote string'
    'name': 'string.quoted.double.rust'
    'begin': '"'
    'end': '"'
    'patterns': [
      { 'include': '#escaped_character' }
    ]
  }
  'types': {
    'comment': 'Built-in type'
    'name': 'storage.type.rust'
    'match': '\\b(bool|char|usize|isize|u8|u16|u32|u64|i8|i16|i32|i64|f32|f64|str|Self)\\b'
  }
  'std_types': {
    'comment': 'Standard library type'
    'name': 'storage.class.std.rust'
    'match': '\\b(Result|Option|Ascii|Box|Path|PosixPath|WindowsPath|String|Vec|SyncSender|Sender|Receiver)\\b'
  }
  'kind': {
    'comment': 'Built-in traits (kind)'
    'name': 'support.type.kind.rust'
    'match': '\\b(Copy|Send|Sized|Sync)\\b'
  }
  'ops': {
    'comment': 'Built-in traits (ops)'
    'name': 'support.type.ops.rust'
    'match': '\\b(Add|Sub|Mul|Div|Rem|Neg|Not|BitAnd|BitOr|BitXor|Drop|Deref|DerefMut|Shl|Shr|Index|IndexMut|Slice|SliceMut|Fn|FnMut|FnOnce)\\b'
  }
  'ascii': {
    'comment': 'Built-in traits (ascii)'
    'name': 'support.type.ascii.rust'
    'match': '\\b(AsciiCast|OwnedAsciiCast|AsciiStr|IntoBytes)\\b'
  }
  'cmp': {
    'comment': 'Built-in traits (cmp)'
    'name': 'support.type.cmp.rust'
    'match': '\\b(PartialEq|PartialOrd|Eq|Ord|Equiv)\\b'
  }
  'collections': {
    'comment': 'Built-in traits (collections)'
    'name': 'support.type.collections.rust'
    'match': '\\b(Collection|Mutable|Map|MutableMap|MutableSeq|Set|MutableSet)\\b'
  }
  'iter': {
    'comment': 'Built-in traits (iter)'
    'name': 'support.type.iter.rust'
    'match': '\\b(FromIterator|Extendable|ExactSize|Iterator|DoubleEndedIterator|RandomAccessIterator|CloneableIterator|OrdIterator|MutableDoubleEndedIterator)\\b'
  }
  'num': {
    'comment': 'Built-in traits (num)'
    'name': 'support.type.num.rust'
    'match': '\\b(Num|NumCast|CheckedAdd|CheckedSub|CheckedMul|CheckedDiv|Signed|Unsigned|Primitive|Int|Float|FloatMath|ToPrimitive|FromPrimitive)\\b'
  }
  'io': {
    'comment': 'Built-in traits (io)'
    'name': 'support.type.io.rust'
    'match': '\\b(Buffer|Writer|Reader|Seek)\\b'
  }
  'str': {
    'comment': 'Built-in traits (str)'
    'name': 'support.type.str.rust'
    'match': '\\b(Str|StrVector|StrSlice|IntoMaybeOwned|StrAllocating|UnicodeStrSlice)\\b'
  }
  'tuple': {
    'comment': 'Built-in traits (tuple)'
    'name': 'support.type.tuple.rust'
    'match': '\\b(Tuple1|Tuple2|Tuple3|Tuple4|Tuple5|Tuple6|Tuple7|Tuple8|Tuple9|Tuple10|Tuple11|Tuple12)\\b'
  }
  'slice': {
    'comment': 'Built-in traits (slice)'
    'name': 'support.type.slice.rust'
    'match': '\\b(CloneableVector|ImmutableCloneableVector|MutableCloneableSlice|MutableOrdSlice|ImmutableSlice|MutableSlice|ImmutablePartialEqSlice|ImmutableOrdSlice|AsSlice|VectorVector|BoxedSlice|MutableSliceAllocating)\\b'
  }
  'other': {
    'comment': 'Built-in traits (other)'
    'name': 'support.type.other.rust'
    'match': '\\b(ToCStr|Clone|GenericPath|RawPtr|ToString|IntoStr)\\b'
  }
  'self': {
    'comment': 'Self variable'
    'name': 'variable.language.rust'
    'match': '\\bself\\b'
  }
  'mut': {
    'comment': 'Mutable storage modifier'
    'name': 'storage.modifier.mut.rust'
    'match': '\\bmut\\b'
  }
  'box': {
    'comment': 'Box storage modifier'
    'name': 'storage.modifier.box.rust'
    'match': '\\bbox\\b'
  }
  'lifetime': {
    'comment': 'Named lifetime'
    'name': 'storage.modifier.lifetime.rust'
    'match': '\'([a-zA-Z_][a-zA-Z0-9_]*)\\b'
    'captures': {
      '1': { 'name': 'entity.name.lifetime.rust' }
    }
  }
  'ref_lifetime': {
    'comment': 'Reference with named lifetime'
    'match': '&(\'([a-zA-Z_][a-zA-Z0-9_]*))\\b'
    'captures': {
      '1': { 'name': 'storage.modifier.lifetime.rust' }
      '2': { 'name': 'entity.name.lifetime.rust' }
    }
  }
  'type_params': {
    'comment': 'Type parameters'
    'name': 'meta.type_params.rust'
    'begin': '<'
    'end': '>'
    'patterns': [
      { 'include': '#block_comment' }
      { 'include': '#line_comment' }
      { 'include': '#sigils' }
      { 'include': '#types' }
      { 'include': '#std_types' }
      { 'include': '#kinds' }
      { 'include': '#mut' }
      { 'include': '#lifetime' }
      { 'include': '#type_params' }
    ]
  }
}

'patterns': [
  # Comments
  { 'include': '#block_doc_comment' }
  { 'include': '#block_comment' }
  { 'include': '#line_doc_comment' }
  { 'include': '#line_comment' }
  # Attributes
  {
    'comment': 'Attribute'
    'name': 'meta.attribute.rust'
    'begin': '#\\!?\\['
    'end': '\\]'
    'patterns': [
      { 'include': '#string_literal' }
    ]
  }
  # Strings
  {
    'comment': 'Single-quote string (character literal)'
    'name': 'string.quoted.single.rust'
    'match': '\'([^\'\\\\]|\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))\''
  }
  { 'include': '#string_literal' }
  { 'include': '#raw_string_literal' }
  # Numbers
  {
    'comment': 'Floating point number (fraction)'
    'name': 'constant.numeric.float.rust'
    'match': '\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-][0-9_]+)?(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point number (exponent)'
    'name': 'constant.numeric.float.rust'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-][0-9_]+(f32|f64)?\\b'
  }
  {
    'comment': 'Floating point number (typed)'
    'name': 'constant.numeric.float.rust'
    'match': '\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-][0-9_]+)?(f32|f64)\\b'
  }
  {
    'comment': 'Integer number (decimal)'
    'name': 'constant.numeric.integer.decimal.rust'
    'match': '\\b[0-9][0-9_]*([ui](8|16|32|64|s))?\\b'
  }
  {
    'comment': 'Integer number (hexadecimal)'
    'name': 'constant.numeric.integer.hexadecimal.rust'
    'match': '\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|s))?\\b'
  }
  {
    'comment': 'Integer number (octal)'
    'name': 'constant.numeric.integer.octal.rust'
    'match': '\\b0o[0-7_]+([ui](8|16|32|64|s))?\\b'
  }
  {
    'comment': 'Integer number (binary)'
    'name': 'constant.numeric.integer.binary.rust'
    'match': '\\b0b[01_]+([ui](8|16|32|64|s))?\\b'
  }
  # Language
  {
    'comment': 'Static storage modifier'
    'name': 'storage.modifier.static.rust'
    'match': '\\bstatic\\b'
  }
  {
    'comment': 'Visibility modifier'
    'name': 'storage.modifier.visibility.rust'
    'match': '\\bpub\\b'
  }
  {
    'comment': 'Boolean constant'
    'name': 'constant.language.boolean.rust'
    'match': '\\b(true|false)\\b'
  }
  {
    'comment': 'Control keyword'
    'name': 'keyword.control.rust'
    'match': '\\b(break|continue|else|if|in|for|loop|match|return|while)\\b'
  }
  {
    'comment': 'Keyword'
    'name': 'keyword.other.rust'
    'match': '\\b(crate|extern|mod|let|proc|ref|use|super|as|where|move)\\b'
  }
  {
    'comment': 'Unsafe code keyword'
    'name': 'keyword.other.unsafe.rust'
    'match': '\\bunsafe\\b'
  }
  # TODO: _
  { 'include': '#sigils' }
  { 'include': '#types' }
  { 'include': '#std_types' }
  { 'include': '#kind' }
  { 'include': '#ops' }
  { 'include': '#ascii' }
  { 'include': '#cmp' }
  { 'include': '#collections' }
  { 'include': '#iter' }
  { 'include': '#num' }
  { 'include': '#io' }
  { 'include': '#str' }
  { 'include': '#tuple' }
  { 'include': '#slice' }
  { 'include': '#other' }
  { 'include': '#self' }
  { 'include': '#mut' }
  { 'include': '#box' }
  { 'include': '#lifetime' }
  { 'include': '#ref_lifetime' }
  # Operators
  {
    'comment': 'Operator'
    'name': 'keyword.operator.rust'
    'match': '(\\+|-|/|\\*|=|\\^|&|\\||!|>|<|%|::|\\bas\\b)'
  }
  # TODO: procs and closures
  # Standard library
  {
    'comment': 'Standard library macro'
    'name': 'support.function.std.rust'
    'match': '\\b(log|error|warn|info|debug|log_enabled|panic|assert|assert_eq|unreachable|unimplemented|format|write|writeln|print|println|local_data_key|try|vec|select)!'
  }
  {
    'comment': 'Standard library type variant'
    'name': 'support.constant.std.rust'
    'match': '\\b(Some|None|Ok|Err)\\b'
  }
  # Function and macro calls
  {
    'comment': 'Invokation of a macro'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*\\!)\\s*[({\\[]'
    'captures': {
      '1': { 'name': 'entity.name.function.macro.rust' }
    }
  }
  {
    'comment': 'Function call'
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\('
    'captures': {
      '1': { 'name': 'entity.name.function.rust' }
    }
  }
  # Function definition
  {
    'comment': 'Function definition'
    'begin': '\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)'
    'end': '[\\{;]'
    'beginCaptures': {
      '1': { 'name': 'keyword.other.fn.rust' }
      '2': { 'name': 'entity.name.function.rust' }
    }
    'patterns': [
      { 'include': '#type_params' }
      { 'include': '$self' }
    ]
  }
  # Type declaration
  {
    'comment': 'Type declaration'
    'begin': '\\b(enum|struct|trait|type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)'
    'end': '[\\{;]'
    'beginCaptures': {
      '1': { 'name': 'storage.type.rust' }
      '2': { 'name': 'entity.name.type.rust' }
    }
    'patterns': [
      { 'include': '#type_params' }
      { 'include': '$self' }
    ]
  }
  # Implementation
  {
    'comment': 'Implementation'
    'begin': '\\b(impl)\\b'
    'end': '\\{'
    'beginCaptures': {
      '1': { 'name': 'storage.type.rust' }
    }
    'patterns': [
      { 'include': '#type_params' }
      { 'include': '$self' }
    ]
  }
  # Variable declaration
  {
    'comment': 'Variable declaration'
    'begin': ':'
    'end': '[=;,\\)\\|]'
    'patterns': [
      { 'include': '#type_params' }
      { 'include': '$self' }
    ]
  }
]
