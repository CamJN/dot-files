/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $range = $opal.range, $hash2 = $opal.hash2, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$to_a', '$to_ary', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$==', '$instance_variable_set', '$members', '$each_with_index', '$each_pair', '$name']);
  (function($base) {
    var self = $module($base, 'Native');

    var def = self._proto, $scope = self._scope, TMP_1;

    $opal.defs(self, '$is_a?', function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    });

    $opal.defs(self, '$try_convert', function(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return nil;
      }
    ;
    });

    $opal.defs(self, '$convert', function(value) {
      var $a, self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "" + (value.$inspect()) + " isn't native");
      }
    ;
    });

    $opal.defs(self, '$call', TMP_1 = function(obj, key, args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      TMP_1._p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, length = args.length; i < length; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    });

    (function($base) {
      var self = $module($base, 'Helpers');

      var def = self._proto, $scope = self._scope;

      def.$alias_native = function(new$, old, options) {
        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_4, self = this, as = nil;

        if (old == null) {
          old = new$
        }
        if (options == null) {
          options = $hash2([], {})
        }
        if ((($a = old['$end_with?']("=")) !== nil && (!$a._isBoolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a._p = (TMP_2 = function(value){var self = TMP_2._s || this, $a;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = (($a = $scope.Native) == null ? $opal.cm('Native') : $a).$convert(value);
            return value;}, TMP_2._s = self, TMP_2), $a).call($b, new$)
        } else if ((($a = as = options['$[]']("as")) !== nil && (!$a._isBoolean || $a == true))) {
          return ($a = ($c = self).$define_method, $a._p = (TMP_3 = function(args){var self = TMP_3._s || this, block, $a, $b, $c, $d;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_3._p || nil, TMP_3._p = null;
          if ((($a = value = ($b = ($c = (($d = $scope.Native) == null ? $opal.cm('Native') : $d)).$call, $b._p = block.$to_proc(), $b).apply($c, [self["native"], old].concat(args))) !== nil && (!$a._isBoolean || $a == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_3._s = self, TMP_3), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a._p = (TMP_4 = function(args){var self = TMP_4._s || this, block, $a, $b, $c;
            if (self["native"] == null) self["native"] = nil;
args = $slice.call(arguments, 0);
            block = TMP_4._p || nil, TMP_4._p = null;
          return ($a = ($b = (($c = $scope.Native) == null ? $opal.cm('Native') : $c)).$call, $a._p = block.$to_proc(), $a).apply($b, [self["native"], old].concat(args))}, TMP_4._s = self, TMP_4), $a).call($d, new$)
        };
      };

      def.$native_reader = function(names) {
        var $a, $b, TMP_5, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a._p = (TMP_5 = function(name){var self = TMP_5._s || this, $a, $b, TMP_6;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a._p = (TMP_6 = function(){var self = TMP_6._s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_6._s = self, TMP_6), $a).call($b, name)}, TMP_5._s = self, TMP_5), $a).call($b);
      };

      def.$native_writer = function(names) {
        var $a, $b, TMP_7, self = this;

        names = $slice.call(arguments, 0);
        return ($a = ($b = names).$each, $a._p = (TMP_7 = function(name){var self = TMP_7._s || this, $a, $b, TMP_8;
if (name == null) name = nil;
        return ($a = ($b = self).$define_method, $a._p = (TMP_8 = function(value){var self = TMP_8._s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_8._s = self, TMP_8), $a).call($b, "" + (name) + "=")}, TMP_7._s = self, TMP_7), $a).call($b);
      };

      def.$native_accessor = function(names) {
        var $a, $b, self = this;

        names = $slice.call(arguments, 0);
        ($a = self).$native_reader.apply($a, [].concat(names));
        return ($b = self).$native_writer.apply($b, [].concat(names));
      };
            ;$opal.donate(self, ["$alias_native", "$native_reader", "$native_writer", "$native_accessor"]);
    })(self);

    $opal.defs(self, '$included', function(klass) {
      var $a, self = this;

      return klass.$extend((($a = $scope.Helpers) == null ? $opal.cm('Helpers') : $a));
    });

    def.$initialize = function(native$) {
      var $a, $b, self = this;

      if ((($a = (($b = $scope.Kernel) == null ? $opal.cm('Kernel') : $b)['$native?'](native$)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        (($a = $scope.Kernel) == null ? $opal.cm('Kernel') : $a).$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    };

    def.$to_n = function() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    };
        ;$opal.donate(self, ["$initialize", "$to_n"]);
  })(self);
  (function($base) {
    var self = $module($base, 'Kernel');

    var def = self._proto, $scope = self._scope, TMP_9;

    def['$native?'] = function(value) {
      var self = this;

      return value == null || !value._klass;
    };

    def.$Native = function(obj) {
      var $a, $b, self = this;

      if ((($a = obj == null) !== nil && (!$a._isBoolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && (!$a._isBoolean || $a == true))) {
        return (($a = ((($b = $scope.Native) == null ? $opal.cm('Native') : $b))._scope).Object == null ? $a.cm('Object') : $a.Object).$new(obj)
        } else {
        return obj
      };
    };

    def.$Array = TMP_9 = function(object, args) {
      var $a, $b, $c, $d, self = this, $iter = TMP_9._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_9._p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (self['$native?'](object)) {
        return ($a = ($b = (($c = ((($d = $scope.Native) == null ? $opal.cm('Native') : $d))._scope).Array == null ? $c.cm('Array') : $c.Array)).$new, $a._p = block.$to_proc(), $a).apply($b, [object].concat(args)).$to_a();
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    };
        ;$opal.donate(self, ["$native?", "$Native", "$Array"]);
  })(self);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self._proto, $scope = self._scope, $a, TMP_10, TMP_11, TMP_12;

    def["native"] = nil;
    self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

    $opal.defn(self, '$==', function(other) {
      var $a, self = this;

      return self["native"] === (($a = $scope.Native) == null ? $opal.cm('Native') : $a).$try_convert(other);
    });

    $opal.defn(self, '$has_key?', function(name) {
      var self = this;

      return $opal.hasOwnProperty.call(self["native"], name);
    });

    $opal.defn(self, '$key?', def['$has_key?']);

    $opal.defn(self, '$include?', def['$has_key?']);

    $opal.defn(self, '$member?', def['$has_key?']);

    $opal.defn(self, '$each', TMP_10 = function(args) {
      var $a, self = this, $iter = TMP_10._p, $yield = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_10._p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          ((($a = $opal.$yieldX($yield, [key, self["native"][key]])) === $breaker) ? $breaker.$v : $a)
        }
      ;
        return self;
        } else {
        return ($a = self).$method_missing.apply($a, ["each"].concat(args))
      };
    });

    $opal.defn(self, '$[]', function(key) {
      var $a, self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return (($a = $opal.Object._scope.Native) == null ? $opal.cm('Native') : $a).$call(self["native"], key)
      }
    ;
    });

    $opal.defn(self, '$[]=', function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = (($a = $scope.Native) == null ? $opal.cm('Native') : $a).$try_convert(value);
      if ((($a = native$ === nil) !== nil && (!$a._isBoolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    });

    $opal.defn(self, '$merge!', function(other) {
      var $a, self = this;

      
      var other = (($a = $scope.Native) == null ? $opal.cm('Native') : $a).$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    });

    $opal.defn(self, '$respond_to?', function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false
      }
      return (($a = $scope.Kernel) == null ? $opal.cm('Kernel') : $a).$instance_method("respond_to?").$bind(self).$call(name, include_all);
    });

    $opal.defn(self, '$respond_to_missing?', function(name) {
      var self = this;

      return $opal.hasOwnProperty.call(self["native"], name);
    });

    $opal.defn(self, '$method_missing', TMP_11 = function(mid, args) {
      var $a, $b, $c, self = this, $iter = TMP_11._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_11._p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, mid.$length()['$-'](1)), args['$[]'](0));
      }
      else {
        return ($a = ($b = (($c = $opal.Object._scope.Native) == null ? $opal.cm('Native') : $c)).$call, $a._p = block.$to_proc(), $a).apply($b, [self["native"], mid].concat(args));
      }
    ;
    });

    $opal.defn(self, '$nil?', function() {
      var self = this;

      return false;
    });

    $opal.defn(self, '$is_a?', function(klass) {
      var self = this;

      return $opal.is_a(self, klass);
    });

    $opal.defn(self, '$kind_of?', def['$is_a?']);

    $opal.defn(self, '$instance_of?', function(klass) {
      var self = this;

      return self._klass === klass;
    });

    $opal.defn(self, '$class', function() {
      var self = this;

      return self._klass;
    });

    $opal.defn(self, '$to_a', TMP_12 = function(options) {
      var $a, $b, $c, $d, self = this, $iter = TMP_12._p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_12._p = null;
      return ($a = ($b = (($c = ((($d = $scope.Native) == null ? $opal.cm('Native') : $d))._scope).Array == null ? $c.cm('Array') : $c.Array)).$new, $a._p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    });

    return ($opal.defn(self, '$inspect', function() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }), nil) && 'inspect';
  })((($a = $scope.Native) == null ? $opal.cm('Native') : $a), (($a = $scope.BasicObject) == null ? $opal.cm('BasicObject') : $a));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self._proto, $scope = self._scope, $a, TMP_13, TMP_14;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

    self.$include((($a = $scope.Enumerable) == null ? $opal.cm('Enumerable') : $a));

    def.$initialize = TMP_13 = function(native$, options) {
      var $a, self = this, $iter = TMP_13._p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {})
      }
      TMP_13._p = null;
      $opal.find_super_dispatcher(self, 'initialize', TMP_13, null).apply(self, [native$]);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), "no length found on the array-like object")
        } else {
        return nil
      };
    };

    def.$each = TMP_14 = function() {
      var self = this, $iter = TMP_14._p, block = $iter || nil;

      TMP_14._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        var value = $opal.$yield1(block, self['$[]'](i));

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return self;
    };

    def['$[]'] = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ((($a = $scope.String) == null ? $opal.cm('String') : $a)['$===']($case) || (($a = $scope.Symbol) == null ? $opal.cm('Symbol') : $a)['$===']($case)) {if ((($a = self.named) !== nil && (!$a._isBoolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ((($a = $scope.Integer) == null ? $opal.cm('Integer') : $a)['$===']($case)) {if ((($a = self.get) !== nil && (!$a._isBoolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil) {
        if ((($a = self.block) !== nil && (!$a._isBoolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    };

    def['$[]='] = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && (!$a._isBoolean || $a == true))) {
        return self["native"][self.set](index, (($a = $scope.Native) == null ? $opal.cm('Native') : $a).$convert(value));
        } else {
        return self["native"][index] = (($a = $scope.Native) == null ? $opal.cm('Native') : $a).$convert(value);
      };
    };

    def.$last = function(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil
      }
      if (count !== false && count !== nil) {
        index = self.$length()['$-'](1);
        result = [];
        while (index['$>='](0)) {
        result['$<<'](self['$[]'](index));
        index = index['$-'](1);};
        return result;
        } else {
        return self['$[]'](self.$length()['$-'](1))
      };
    };

    def.$length = function() {
      var self = this;

      return self["native"][self.length];
    };

    $opal.defn(self, '$to_ary', def.$to_a);

    return (def.$inspect = function() {
      var self = this;

      return self.$to_a().$inspect();
    }, nil) && 'inspect';
  })((($a = $scope.Native) == null ? $opal.cm('Native') : $a), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self._proto, $scope = self._scope;

    def.matches = nil;
    return (def.$to_n = function() {
      var self = this;

      return self.matches;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self._proto, $scope = self._scope;

    def.$initialize = function(args) {
      var $a, $b, TMP_15, $c, TMP_16, self = this, object = nil;

      args = $slice.call(arguments, 0);
      if ((($a = (($b = args.$length()['$=='](1)) ? self['$native?'](args['$[]'](0)) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        object = args['$[]'](0);
        return ($a = ($b = self.$members()).$each, $a._p = (TMP_15 = function(name){var self = TMP_15._s || this;
if (name == null) name = nil;
        return self.$instance_variable_set("@" + (name), self.$Native(object[name]))}, TMP_15._s = self, TMP_15), $a).call($b);
        } else {
        return ($a = ($c = self.$members()).$each_with_index, $a._p = (TMP_16 = function(name, index){var self = TMP_16._s || this;
if (name == null) name = nil;if (index == null) index = nil;
        return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_16._s = self, TMP_16), $a).call($c)
      };
    };

    return (def.$to_n = function() {
      var $a, $b, TMP_17, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a._p = (TMP_17 = function(name, value){var self = TMP_17._s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = value.$to_n();}, TMP_17._s = self, TMP_17), $a).call($b);
      return result;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        if ((obj)['$respond_to?']("to_n")) {
          result.push((obj).$to_n());
        }
        else {
          result.push(obj);
        }
      }

      return result;
    ;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return self.valueOf();
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return self;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self._proto, $scope = self._scope;

    return (def.$to_n = function() {
      var self = this;

      return null;
    }, nil) && 'to_n'
  })(self, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self._proto, $scope = self._scope, TMP_18;

    def.$initialize = TMP_18 = function(defaults) {
      var $a, self = this, $iter = TMP_18._p, block = $iter || nil;

      TMP_18._p = null;
      
      if (defaults != null) {
        if (defaults.constructor === Object) {
          var map  = self.map,
              keys = self.keys;

          for (var key in defaults) {
            var value = defaults[key];

            if (value && value.constructor === Object) {
              map[key] = (($a = $scope.Hash) == null ? $opal.cm('Hash') : $a).$new(value);
            }
            else {
              map[key] = self.$Native(defaults[key]);
            }

            keys.push(key);
          }
        }
        else {
          self.none = defaults;
        }
      }
      else if (block !== nil) {
        self.proc = block;
      }

      return self;
    
    };

    return (def.$to_n = function() {
      var self = this;

      
      var result = {},
          keys   = self.keys,
          map    = self.map,
          bucket,
          value;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i],
            obj = map[key];

        if ((obj)['$respond_to?']("to_n")) {
          result[key] = (obj).$to_n();
        }
        else {
          result[key] = obj;
        }
      }

      return result;
    ;
    }, nil) && 'to_n';
  })(self, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self._proto, $scope = self._scope;

    return (def.$native_module = function() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, nil) && 'native_module'
  })(self, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self._proto, $scope = self._scope;

    def.$native_alias = function(jsid, mid) {
      var self = this;

      return self._proto[jsid] = self._proto['$' + mid];
    };

    return $opal.defn(self, '$native_class', def.$native_module);
  })(self, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/native.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Atom');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $BufProcess(){};
      var self = $BufProcess = $klass($base, $super, 'BufProcess', $BufProcess);

      var def = self._proto, $scope = self._scope, $a, TMP_1;

      self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

      def.$initialize = TMP_1 = function(command, args, stdout, exitcb) {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil, options = nil, other_atom = nil;

        TMP_1._p = null;
        options = { command: command, args: args, stdout: stdout, exit: exitcb };
        other_atom = require("atom");
        return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new other_atom.BufferedProcess(options)]);
      };

      return self.$alias_native("kill");
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/atom/buf_process.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'SEPARATOR', "/");

    return ($opal.defs(self, '$expand_path', function(path) {
      var self = this;

      return path;
    }), nil) && 'expand_path';
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/file.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Atom');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Config(){};
      var self = $Config = $klass($base, $super, 'Config', $Config);

      var def = self._proto, $scope = self._scope, $a, TMP_1;

      self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

      def.$initialize = TMP_1 = function() {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [atom.config]);
      };

      self.$alias_native("settings", "getSettings");

      self.$alias_native("user_config_path", "getUserConfigPath");

      self.$alias_native("default?", "isDefault");

      self.$alias_native("observe");

      self.$alias_native("push_at_key_path", "pushAtKeyPath");

      self.$alias_native("remove_at_key_path", "removeAtKeyPath");

      self.$alias_native("restore_default", "restoreDefault");

      self.$alias_native("toggle");

      self.$alias_native("unobserve");

      return self.$alias_native("unshift_at_key_path", "unshiftAtKeyPath");
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/atom/config.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$include', '$native_accessor', '$new', '$alias_native', '$[]', '$to_n', '$map', '$respond_to?', '$to_path']);
  ;
  ;
  ;
  ;
  return (function($base) {
    var self = $module($base, 'Atom');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Atom(){};
      var self = $Atom = $klass($base, $super, 'Atom', $Atom);

      var def = self._proto, $scope = self._scope, $a, TMP_1;

      def.config = def["native"] = nil;
      self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

      self.$native_accessor("clipboard", "context_menu", "deserializers", "keymap", "menu", "packages", "project", "syntax", "themes", "workspace", "github_auth_token");

      def.$initialize = TMP_1 = function() {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [atom]);
      };

      def.$config = function() {
        var $a, $b, $c, self = this;

        return ((($a = self.config) !== false && $a !== nil) ? $a : (($b = ((($c = $scope.Atom) == null ? $opal.cm('Atom') : $c))._scope).Config == null ? $b.cm('Config') : $b.Config).$new());
      };

      self.$alias_native("beep");

      self.$alias_native("center");

      self.$alias_native("close");

      def.$confirm = function(opts) {
        var $a, self = this, message = nil, detailed_message = nil, buttons = nil;

        message = ((($a = opts['$[]']("message")) !== false && $a !== nil) ? $a : "");
        detailed_message = ((($a = opts['$[]']("detailed_message")) !== false && $a !== nil) ? $a : "");
        buttons = opts['$[]']("buttons").$to_n();
        return self["native"].confirm({message: message, detailedMessage: detailed_message, buttons: buttons});
      };

      self.$alias_native("focus");

      self.$alias_native("config_dir_path", "getConfigDirPath");

      self.$alias_native("current_window", "getCurrentWindow");

      self.$alias_native("github_auth_token", "getGithubAuthToken");

      self.$alias_native("load_settings", "getLoadSettings");

      self.$alias_native("version", "getVersion");

      self.$alias_native("window_dimensions", "getWindowDimensions");

      self.$alias_native("window_load_time", "getWindowLoadTime");

      self.$alias_native("hide");

      self.$alias_native("dev_mode?", "inDevMode");

      self.$alias_native("spec_mode?", "inSpecMode");

      def.$atom_init = function() {
        var self = this;

        return atom.initialize();
      };

      self.$alias_native("full_screen?", "isFullScreen");

      self.$alias_native("released_version", "isReleasedVersion");

      def.$open = function(opts) {
        var $a, $b, TMP_2, self = this, paths = nil;

        if (opts == null) {
          opts = $hash2([], {})
        }
        paths = ($a = ($b = opts['$[]']("paths_to_open")).$map, $a._p = (TMP_2 = function(p){var self = TMP_2._s || this, $a;
if (p == null) p = nil;
        if ((($a = p['$respond_to?']("to_path")) !== nil && (!$a._isBoolean || $a == true))) {
            return p.$to_path()
            } else {
            return p
          }}, TMP_2._s = self, TMP_2), $a).call($b);
        return self["native"].open({ pathsToOpen: paths });
      };

      self.$alias_native("open_dev_tools", "openDevTools");

      self.$alias_native("reload");

      def['$full_screen='] = function(fullscreen) {
        var self = this;

        if (fullscreen == null) {
          fullscreen = false
        }
        return self["native"].setFullScreen(fullscreen);
      };

      def['$github_auth_token='] = function(token) {
        var self = this;

        return self.github_auth_token = self["native"].setGithubAuthToken(token);
      };

      def['$position='] = function(x, y) {
        var self = this;

        return self["native"].setPosition(x,y);
      };

      def['$size='] = function(width, height) {
        var self = this;

        return self["native"].setSize(width, height);
      };

      def['$window_dimensions='] = function(dimensions) {
        var self = this;

        if (dimensions == null) {
          dimensions = $hash2([], {})
        }
        return self["native"].setWindowDimensions(dimensions.map);
      };

      self.$alias_native("show");

      self.$alias_native("toggle_dev_tools", "toggleDevTools");

      self.$alias_native("toggle_full_screen");

      self.$alias_native("workspace");

      return self.$alias_native("workspace_view", "workspaceView");
    })(self, null)
    
  })(self);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/atom/atom.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$attr_accessor', '$Native', '$alias_native']);
  return (function($base) {
    var self = $module($base, 'Atom');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $File(){};
      var self = $File = $klass($base, $super, 'File', $File);

      var def = self._proto, $scope = self._scope, $a, TMP_1;

      def.pathwatcher = def.filepath = nil;
      self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

      self.$attr_accessor("filepath", "fs", "pathwatcher");

      def.$initialize = TMP_1 = function(filepath) {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        self.filepath = filepath;
        self.fs = self.$Native(require("fs-plus"));
        self.pathwatcher = require("pathwatcher");
        return $opal.find_super_dispatcher(self, 'initialize', TMP_1, null).apply(self, [new self.pathwatcher.File(self.filepath)]);
      };

      self.$alias_native("base_name", "getBaseName");

      self.$alias_native("digest", "getDigest");

      self.$alias_native("path", "getPath");

      self.$alias_native("real_path_sync", "getRealPathSync");

      self.$alias_native("directory?", "isDirectory");

      self.$alias_native("file?", "isFile");

      self.$alias_native("read");

      return self.$alias_native("write");
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/atom/file.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$attr_accessor', '$config', '$getPath', '$project', '$create_temp', '$lambda', '$getText', '$write', '$process_env_vars', '$Native', '$+', '$parse_single', '$<<', '$sort', '$compact', '$call', '$new', '$getActiveEditor', '$workspace', '$getCursor', '$getBufferRow', '$getBuffer', '$getBufferColumn', '$getTextInRange', '$-', '$completions', '$to_n', '$match', '$respond_to?', '$first', '$captures', '$file', '$raise']);
  ;
  return (function($base) {
    var self = $module($base, 'Racer');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Client(){};
      var self = $Client = $klass($base, $super, 'Client', $Client);

      var def = self._proto, $scope = self._scope;

      def.atom = def.rust_src = def.project_path = def.editor = nil;
      Suggestion = require("autocomplete-plus").Suggestion;

      self.$attr_accessor("atom", "editor", "text", "tempfile", "file", "filepath", "candidates", "settings");

      def.$initialize = function(atom) {
        var self = this;

        self.atom = atom;
        return self.settings = self.atom.$config();
      };

      def.$process_env_vars = function() {
        var $a, self = this;

        self.rust_src = ((($a = self.rust_src) !== false && $a !== nil) ? $a : atom.config.get("atom-racer.rustSrcPath"));
        self.project_path = ((($a = self.project_path) !== false && $a !== nil) ? $a : self.atom.$project().$getPath());
        return "" + (self.rust_src) + ":" + (self.project_path);
      };

      def.$completions = function(editor, row, col, cb) {
        var $a, $b, TMP_1, self = this;

        self.editor = editor;
        self.candidates = [];
        return self.$create_temp(($a = ($b = self).$lambda, $a._p = (TMP_1 = function(tempfile){var self = TMP_1._s || this, $a, $b, TMP_2, $c, TMP_3, $d, racer_bin = nil, command = nil, args = nil, stdout = nil, myexit = nil, buffer = nil;
          if (self.editor == null) self.editor = nil;
          if (self.tempfile == null) self.tempfile = nil;
          if (self.text == null) self.text = nil;
          if (self.filepath == null) self.filepath = nil;
if (tempfile == null) tempfile = nil;
        self.tempfile = tempfile;
          self.text = self.editor.$getText();
          self.tempfile.$write(self.text);
          $opal.cdecl($scope, 'RUST_SRC_PATH', self.$process_env_vars());
          process.env.RUST_SRC_PATH = (($a = $scope.RUST_SRC_PATH) == null ? $opal.cm('RUST_SRC_PATH') : $a);
          racer_bin = self.$Native(atom.config.get("atom-racer.racerBinPath"));
          command = "" + (racer_bin);
          args = ["complete", row['$+'](1), col, self.filepath];
          stdout = ($a = ($b = self).$lambda, $a._p = (TMP_2 = function(output){var self = TMP_2._s || this, parsed = nil;
            if (self.candidates == null) self.candidates = nil;
if (output == null) output = nil;
          parsed = self.$parse_single(output);
            if (parsed !== false && parsed !== nil) {
              return self.candidates['$<<'](parsed)
              } else {
              return nil
            };}, TMP_2._s = self, TMP_2), $a).call($b);
          myexit = ($a = ($c = self).$lambda, $a._p = (TMP_3 = function(code){var self = TMP_3._s || this;
            if (self.candidates == null) self.candidates = nil;
if (code == null) code = nil;
          self.candidates = self.candidates.$compact().$sort();
            return cb.$call(self.candidates);}, TMP_3._s = self, TMP_3), $a).call($c);
          return buffer = (($a = ((($d = $scope.Atom) == null ? $opal.cm('Atom') : $d))._scope).BufProcess == null ? $a.cm('BufProcess') : $a.BufProcess).$new(command, args, stdout, myexit);}, TMP_1._s = self, TMP_1), $a).call($b));
      };

      def.$check_completion = function(cb) {
        var $a, $b, TMP_4, self = this, cursor = nil, row = nil, tbuffer = nil, col = nil, last_char = nil;

        self.editor = self.atom.$workspace().$getActiveEditor();
        cursor = self.$Native(self.editor.$getCursor());
        row = self.$Native(cursor.$getBufferRow());
        tbuffer = self.$Native(self.editor.$getBuffer());
        col = self.$Native(cursor.$getBufferColumn());
        last_char = tbuffer.$getTextInRange([[row, col['$-'](2)], [row, col]]);
        return self.$completions(self.editor, row, col, ($a = ($b = self).$lambda, $a._p = (TMP_4 = function(suggestions){var self = TMP_4._s || this;
if (suggestions == null) suggestions = nil;
        return cb.$call(null, suggestions.$to_n())}, TMP_4._s = self, TMP_4), $a).call($b));
      };

      def.$parse_single = function(line) {
        var $a, $b, self = this, matches = nil;

        matches = line.$match(/^MATCH (\w*)\,/);
        if ((($a = (($b = matches !== false && matches !== nil) ? matches['$respond_to?']("captures") : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          return matches.$captures().$first()
          } else {
          return nil
        };
      };

      return (def.$create_temp = function(cb) {
        var $a, $b, TMP_5, self = this, tmp = nil;

        tmp = self.$Native(require("tmp"));
        return tmp.$file({ postfix: ".racertmp" }, ($a = ($b = self).$lambda, $a._p = (TMP_5 = function(err, path, fd){var self = TMP_5._s || this, $a, $b;
if (err == null) err = nil;if (path == null) path = nil;if (fd == null) fd = nil;
        self.filepath = path;
          cb.$call((($a = ((($b = $scope.Atom) == null ? $opal.cm('Atom') : $b))._scope).File == null ? $a.cm('File') : $a.File).$new(path));
          if (err !== false && err !== nil) {
            return self.$raise("Exception while creating tmpfile\n  " + (err))
            } else {
            return nil
          };}, TMP_5._s = self, TMP_5), $a).call($b));
      }, nil) && 'create_temp';
    })(self, null)
    
  })(self);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/racer/client.js.map
;
/* Generated by Opal 0.6.2 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$attr_accessor', '$new', '$Native', '$<<', '$init']);
  ;
  ;
  ;
  return (function($base) {
    var self = $module($base, 'Racer');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Racer(){};
      var self = $Racer = $klass($base, $super, 'Racer', $Racer);

      var def = self._proto, $scope = self._scope, $a;

      def.atom = def.providers = def.racer_client = nil;
      self.$include((($a = $scope.Native) == null ? $opal.cm('Native') : $a));

      self.$attr_accessor("atom", "editor_subscription", "providers", "autocomplete", "racer_client", "providers");

      def.$initialize = function() {
        var $a, $b, self = this;

        self.atom = (($a = ((($b = $scope.Atom) == null ? $opal.cm('Atom') : $b))._scope).Atom == null ? $a.cm('Atom') : $a.Atom).$new();
        self.racer_client = (($a = ((($b = $scope.Racer) == null ? $opal.cm('Racer') : $b))._scope).Client == null ? $a.cm('Client') : $a.Client).$new(self.atom);
        return self.providers = [];
      };

      def.$add_provider = function(provider) {
        var self = this, nprovider = nil;

        nprovider = self.$Native(provider);
        self.providers['$<<'](nprovider);
        return nprovider.$init(self.racer_client);
      };

      return (def.$clear_providers = function() {
        var self = this;

        return self.providers = [];
      }, nil) && 'clear_providers';
    })(self, null)
    
  })(self);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/racer.js.map
;
