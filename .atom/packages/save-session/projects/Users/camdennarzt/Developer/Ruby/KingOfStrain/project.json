[{"diskText":"class Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    user ||= User.guest.new # guest user (not logged in)\n    if user.role.nil?\n      user.guest!\n    end\n\n    case user.role\n    when 'registered'\n      can :read, [Score, Event]\n      can :create, Score, user: { id: user.id}\n    when 'banned'\n      cannot :manage, :all\n    when 'admin'\n      can :manage, :all\n      can :access, :rails_admin\n      can :dashboard\n    else\n      can :read, [Score, Event]\n    end\n\n  end\nend\n","text":"class Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    user ||= User.guest.new # guest user (not logged in)\n    if user.role.nil?\n      user.guest!\n    end\n\n    case user.role\n    when 'registered'\n      can :read, [Score, Event]\n      can :create, Score, user: { id: user.id}\n    when 'banned'\n      cannot :manage, :all\n    when 'admin'\n      can :manage, :all\n      can :access, :rails_admin\n      can :dashboard\n    else\n      can :read, [Score, Event]\n    end\n\n  end\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/KingOfStrain/app/models/ability.rb","scroll":2,"cursor":{"row":8,"column":0}},{"diskText":"class ApplicationController < ActionController::Base\n  # Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\n  before_action :detect_browser_os_and_device\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  rescue_from CanCan::AccessDenied do |exception|\n    render(file: File.join(Rails.root, 'public/403.html'), status: :forbidden, layout: false)\n  end\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:name, :username, :email, :password, :password_confirmation) }\n    devise_parameter_sanitizer.for(:sign_in) { |u| u.permit(:login, :password) }\n    devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:name, :username, :email, :password, :password_confirmation, :current_password) }\n  end\n\n  private\n\n  def detect_browser_os_and_device\n      case request.protocol\n      when /http/i\n        request.variant = [:http]\n      when /https/i\n        request.variant = [:https]\n      end\n\n      case request.user_agent\n      when /iPad/i\n        request.variant.push(:tablet)\n      when /iPhone/i || /Windows Phone/i\n        request.variant.push(:phone)\n      when /Android/i && /mobile/i\n        request.variant.push(:phone)\n      when /Android/i\n        request.variant.push(:tablet)\n      end\n      case request.user_agent\n      when /Android/i\n        request.variant.push(:android)\n      when /iPhone/i || /iPad/i\n        request.variant.push(:ios)\n      when /Windows/i\n        request.variant.push(:windows)\n      when /Macintosh/i || /MacOS/i || /Darwin/i\n        request.variant.push(:mac)\n      when /BSD/i\n        request.variant.push(:bsd)\n      when /Linux/i || /Ubuntu/i\n        request.variant.push(:linux)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberry)\n      when /CrOS/i\n        request.variant.push(:chromeos)\n      when /Firefox/i && /Mobile/i\n        request.variant.push(:firefoxos)\n      end\n      case request.user_agent\n      when /Chrome/i || /Chromium/i || /CrMo/i || /CriOS/i\n        request.variant.push(:chrome)\n      when /Firefox/i || /Fennec/i\n        request.variant.push(:firefox)\n      when /Safari/i && /Android/i\n        request.variant.push(:androidb)\n      when /Opera/i || /OPR/i || /Presto/i\n        request.variant.push(:opera)\n      when /MSIE/i || /Trident/i || /IE/i || /IEMobile/i\n        request.variant.push(:ie)\n      when /Safari/i || /iPhone/i || /iPad/i\n        request.variant.push(:safari)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberryb)\n      end\n  end\nend\n","text":"class ApplicationController < ActionController::Base\n  # Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\n  before_action :detect_browser_os_and_device\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  rescue_from CanCan::AccessDenied do |exception|\n    render(file: File.join(Rails.root, 'public/403.html'), status: :forbidden, layout: false)\n  end\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:name, :username, :email, :password, :password_confirmation) }\n    devise_parameter_sanitizer.for(:sign_in) { |u| u.permit(:login, :password) }\n    devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:name, :username, :email, :password, :password_confirmation, :current_password) }\n  end\n\n  private\n\n  def detect_browser_os_and_device\n      case request.protocol\n      when /http/i\n        request.variant = [:http]\n      when /https/i\n        request.variant = [:https]\n      end\n\n      case request.user_agent\n      when /iPad/i\n        request.variant.push(:tablet)\n      when /iPhone/i || /Windows Phone/i\n        request.variant.push(:phone)\n      when /Android/i && /mobile/i\n        request.variant.push(:phone)\n      when /Android/i\n        request.variant.push(:tablet)\n      end\n      case request.user_agent\n      when /Android/i\n        request.variant.push(:android)\n      when /iPhone/i || /iPad/i\n        request.variant.push(:ios)\n      when /Windows/i\n        request.variant.push(:windows)\n      when /Macintosh/i || /MacOS/i || /Darwin/i\n        request.variant.push(:mac)\n      when /BSD/i\n        request.variant.push(:bsd)\n      when /Linux/i || /Ubuntu/i\n        request.variant.push(:linux)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberry)\n      when /CrOS/i\n        request.variant.push(:chromeos)\n      when /Firefox/i && /Mobile/i\n        request.variant.push(:firefoxos)\n      end\n      case request.user_agent\n      when /Chrome/i || /Chromium/i || /CrMo/i || /CriOS/i\n        request.variant.push(:chrome)\n      when /Firefox/i || /Fennec/i\n        request.variant.push(:firefox)\n      when /Safari/i && /Android/i\n        request.variant.push(:androidb)\n      when /Opera/i || /OPR/i || /Presto/i\n        request.variant.push(:opera)\n      when /MSIE/i || /Trident/i || /IE/i || /IEMobile/i\n        request.variant.push(:ie)\n      when /Safari/i || /iPhone/i || /iPad/i\n        request.variant.push(:safari)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberryb)\n      end\n  end\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/KingOfStrain/app/controllers/application_controller.rb","scroll":2,"cursor":{"row":0,"column":0}},{"diskText":"class EventsController < ApplicationController\n  before_action :authenticate_user!, except: [:index, :show, :latest]\n  load_and_authorize_resource except: [:latest, :show]\n\n  def latest\n    authorize! :read, Event\n    @event = Event.order(:start).last\n  end\n\n  def index\n    # @events = Event.all\n  end\n\n  def show\n    @event = Event.friendly.find(params[:id])\n    authorize! :read, @event\n  end\n\nend\n","text":"class EventsController < ApplicationController\n  before_action :authenticate_user!, except: [:index, :show, :latest]\n  load_and_authorize_resource except: [:latest, :show]\n\n  def latest\n    authorize! :read, Event\n    @event = Event.order(:start).last\n  end\n\n  def index\n    # @events = Event.all\n  end\n\n  def show\n    @event = Event.friendly.find(params[:id])\n    authorize! :read, @event\n  end\n\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/KingOfStrain/app/controllers/events_controller.rb","scroll":2,"cursor":{"row":0,"column":0}},{"diskText":"class ScoresController < ApplicationController\n  before_action :authenticate_user!, except: [:index, :show]\n  load_and_authorize_resource\n\n  def index\n      # @scores = Score.all\n  end\nend\n","text":"class ScoresController < ApplicationController\n  before_action :authenticate_user!, except: [:index, :show]\n  load_and_authorize_resource\n\n  def index\n      # @scores = Score.all\n  end\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/KingOfStrain/app/controllers/scores_controller.rb","scroll":2,"cursor":{"row":8,"column":0}},{"diskText":"# PostgreSQL. Versions 8.2 and up are supported.\n#\n# Install the pg driver:\n#   gem install pg\n# On OS X with Homebrew:\n#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config\n# On OS X with MacPorts:\n#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config\n# On Windows:\n#   gem install pg\n#       Choose the win32 build.\n#       Install PostgreSQL and put its /bin directory on your path.\n#\n# Configure Using Gemfile\n# gem 'pg'\n#\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  # For details on connection pooling, see rails configuration guide\n  # http://guides.rubyonrails.org/configuring.html#database-pooling\n  pool: 5\n\ndevelopment:\n  <<: *default\n  database: KingOfStrain_development\n\n  # The specified database role being used to connect to postgres.\n  # To create additional roles in postgres see `$ createuser --help`.\n  # When left blank, postgres will use the default role. This is\n  # the same name as the operating system user that initialized the database.\n  # username: camdennarzt\n\n  # The password associated with the postgres role (username).\n  # password:\n\n  # Connect on a TCP socket. Omitted by default since the client uses a\n  # domain socket that doesn't need configuration. Windows does not have\n  # domain sockets, so uncomment these lines.\n  # host: localhost\n\n  # The TCP port the server listens on. Defaults to 5432.\n  # If your server runs on a different port number, change accordingly.\n  # port: 5432\n\n  # Schema search path. The server defaults to $user,public\n  # schema_search_path: myapp,sharedapp,public\n\n  # Minimum log levels, in increasing order:\n  #   debug5, debug4, debug3, debug2, debug1,\n  #   log, notice, warning, error, fatal, and panic\n  # Defaults to warning.\n  # min_messages: notice\n\n# Warning: The database defined as \"test\" will be erased and\n# re-generated from your development database when you run \"rake\".\n# Do not set this db to the same as development or production.\ntest:\n  <<: *default\n  database: KingOfStrain_test\n\n# As with config/secrets.yml, you never want to store sensitive information,\n# like your database password, in your source code. If your source code is\n# ever seen by anyone, they now have access to your database.\n#\n# Instead, provide the password as a unix environment variable when you boot\n# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database\n# for a full rundown on how to provide these environment variables in a\n# production deployment.\n#\n# On Heroku and other platform providers, you may have a full connection URL\n# available as an environment variable. For example:\n#\n#   DATABASE_URL=\"postgres://myuser:mypass@localhost/somedatabase\"\n#\n# You can use this database configuration with:\n#\n#   production:\n#     url: <%= ENV['DATABASE_URL'] %>\n#\nproduction:\n  <<: *default\n  database: KingOfStrain_production\n  username: KingOfStrain\n  password: <%= ENV['KING_OF_STRAIN_DATABASE_PASSWORD'] %>\n","text":"# PostgreSQL. Versions 8.2 and up are supported.\n#\n# Install the pg driver:\n#   gem install pg\n# On OS X with Homebrew:\n#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config\n# On OS X with MacPorts:\n#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config\n# On Windows:\n#   gem install pg\n#       Choose the win32 build.\n#       Install PostgreSQL and put its /bin directory on your path.\n#\n# Configure Using Gemfile\n# gem 'pg'\n#\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  # For details on connection pooling, see rails configuration guide\n  # http://guides.rubyonrails.org/configuring.html#database-pooling\n  pool: 5\n\ndevelopment:\n  <<: *default\n  database: KingOfStrain_development\n\n  # The specified database role being used to connect to postgres.\n  # To create additional roles in postgres see `$ createuser --help`.\n  # When left blank, postgres will use the default role. This is\n  # the same name as the operating system user that initialized the database.\n  # username: camdennarzt\n\n  # The password associated with the postgres role (username).\n  # password:\n\n  # Connect on a TCP socket. Omitted by default since the client uses a\n  # domain socket that doesn't need configuration. Windows does not have\n  # domain sockets, so uncomment these lines.\n  # host: localhost\n\n  # The TCP port the server listens on. Defaults to 5432.\n  # If your server runs on a different port number, change accordingly.\n  # port: 5432\n\n  # Schema search path. The server defaults to $user,public\n  # schema_search_path: myapp,sharedapp,public\n\n  # Minimum log levels, in increasing order:\n  #   debug5, debug4, debug3, debug2, debug1,\n  #   log, notice, warning, error, fatal, and panic\n  # Defaults to warning.\n  # min_messages: notice\n\n# Warning: The database defined as \"test\" will be erased and\n# re-generated from your development database when you run \"rake\".\n# Do not set this db to the same as development or production.\ntest:\n  <<: *default\n  database: KingOfStrain_test\n\n# As with config/secrets.yml, you never want to store sensitive information,\n# like your database password, in your source code. If your source code is\n# ever seen by anyone, they now have access to your database.\n#\n# Instead, provide the password as a unix environment variable when you boot\n# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database\n# for a full rundown on how to provide these environment variables in a\n# production deployment.\n#\n# On Heroku and other platform providers, you may have a full connection URL\n# available as an environment variable. For example:\n#\n#   DATABASE_URL=\"postgres://myuser:mypass@localhost/somedatabase\"\n#\n# You can use this database configuration with:\n#\n#   production:\n#     url: <%= ENV['DATABASE_URL'] %>\n#\nproduction:\n  <<: *default\n  database: KingOfStrain_production\n  username: KingOfStrain\n  password: <%= ENV['KING_OF_STRAIN_DATABASE_PASSWORD'] %>\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/KingOfStrain/config/database.yml","scroll":2,"cursor":{"row":0,"column":0}}]