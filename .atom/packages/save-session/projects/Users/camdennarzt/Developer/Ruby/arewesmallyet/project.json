[{"diskText":"require_relative \"../lib/domainredirect.rb\"\n\nclass Arewesmallyet < Padrino::Application\n  register Padrino::Rendering\n  register Padrino::Pipeline\n  register Padrino::Helpers\n  register Padrino::Cache\n\n  use Rack::DomainRedirect, [\"arewesmallyet.dev\", \"localhost\"]\n\n  disable :caching\n  disable :sessions\n  disable :flash\n  set :haml, :format => :html5\n\n  get :index do\n    render :index\n  end\n\n  get :data, provides: :json do\n    # Record.order(:day).map do |r|\n    #   {r.day.to_s => JSON.parse!(r.data)}\n    # end.reduce({}, :merge!).to_json\n\n    Sequel::Model.db.fetch(\"select format('{%s}', string_agg(format('%s:%s',to_json(day),data) ,',') )::json as jsobj from records;\").first[:jsobj]\n  end\n\n  get \"/*\", :priority => :low do\n    redirect \"/\"\n  end\n\n  configure_assets do |config|\n    config.pipeline = Padrino::Pipeline::Sprockets\n    config.prefix = '/public'\n  end\n\n  configure :production do\n    enable :caching\n    expires 3600 * 12\n    # You can customize caching store engines:\n    #\n    #   set :cache, Padrino::Cache::Store::Memcache.new(::Memcached.new('127.0.0.1:11211', :exception_retry_limit => 1))\n    #   set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new('127.0.0.1:11211', :exception_retry_limit => 1))\n    #   set :cache, Padrino::Cache::Store::Redis.new(::Redis.new(:host => '127.0.0.1', :port => 6379, :db => 0))\n    #   set :cache, Padrino::Cache::Store::Memory.new(50)\n    #   set :cache, Padrino::Cache::Store::File.new(Padrino.root('tmp', app_name.to_s, 'cache')) # default choice\n    set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new(:exception_retry_limit => 1))\n  end\n\n  configure :development do\n    disable :asset_stamp # no asset timestamping for dev\n  end\n\n  ##\n  # You can manage errors like:\n  #\n  #   error 404 do\n  #     render 'errors/404'\n  #   end\n  #\n  #   error 505 do\n  #     render 'errors/505'\n  #   end\n  #\nend\n","text":"require_relative \"../lib/domainredirect.rb\"\n\nclass Arewesmallyet < Padrino::Application\n  register Padrino::Rendering\n  register Padrino::Pipeline\n  register Padrino::Helpers\n  register Padrino::Cache\n\n  use Rack::DomainRedirect, [\"arewesmallyet.dev\", \"localhost\"]\n\n  disable :sessions\n  disable :flash\n  set :haml, :format => :html5\n\n  get :index do\n    render :index\n  end\n\n  get :data, provides: :json do\n    # Record.order(:day).map do |r|\n    #   {r.day.to_s => JSON.parse!(r.data)}\n    # end.reduce({}, :merge!).to_json\n\n    Sequel::Model.db.fetch(\"select format('{%s}', string_agg(format('%s:%s',to_json(day),data) ,',') )::json as jsobj from records;\").first[:jsobj]\n  end\n\n  get \"/*\", :priority => :low do\n    redirect \"/\"\n  end\n\n  configure_assets do |config|\n    config.pipeline = Padrino::Pipeline::Sprockets\n    config.prefix = '/public'\n  end\n\n  configure :production do\n    enable :caching\n    expires 3600 * 12\n    # You can customize caching store engines:\n    #\n    #   set :cache, Padrino::Cache::Store::Memcache.new(::Memcached.new('127.0.0.1:11211', :exception_retry_limit => 1))\n    #   set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new('127.0.0.1:11211', :exception_retry_limit => 1))\n    #   set :cache, Padrino::Cache::Store::Redis.new(::Redis.new(:host => '127.0.0.1', :port => 6379, :db => 0))\n    #   set :cache, Padrino::Cache::Store::Memory.new(50)\n    #   set :cache, Padrino::Cache::Store::File.new(Padrino.root('tmp', app_name.to_s, 'cache')) # default choice\n    set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new(:exception_retry_limit => 1))\n  end\n\n  configure :development do\n    disable :asset_stamp # no asset timestamping for dev\n    disable :caching\n  end\n\n  ##\n  # You can manage errors like:\n  #\n  #   error 404 do\n  #     render 'errors/404'\n  #   end\n  #\n  #   error 505 do\n  #     render 'errors/505'\n  #   end\n  #\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/arewesmallyet/app/app.rb","scroll":18.72222222222222,"cursor":{"row":50,"column":20}},{"diskText":"Sequel::Model.plugin(:schema)\n#Sequel::Model.raise_on_save_failure = false # Do not throw exceptions on failure\nSequel::Model.db = case Padrino.env\n  when :development then Sequel.connect(adapter:'postgres', host:'localhost', port:5432, database:'arewesmallyet', user:'camdennarzt')\n  when :production  then Sequel.connect(ENV['DATABASE_URL'],  :loggers => [logger])\n  when :test        then Sequel.connect(\"sqlite://\" + Padrino.root('db', \"arewesmallyet_test.db\"),        :loggers => [logger])\nend\n\nSequel::Model.db.extension(:connection_validator)\n","text":"Sequel::Model.plugin(:schema)\n#Sequel::Model.raise_on_save_failure = false # Do not throw exceptions on failure\nSequel::Model.db = case Padrino.env\n  when :development then Sequel.connect(adapter:'postgres', host:'localhost', port:5432, database:'arewesmallyet', user:'camdennarzt')\n  when :production  then Sequel.connect(ENV['DATABASE_URL'],  :loggers => [logger])\n  when :test        then Sequel.connect(\"sqlite://\" + Padrino.root('db', \"arewesmallyet_test.db\"),        :loggers => [logger])\nend\n\nSequel::Model.db.extension(:connection_validator)\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/arewesmallyet/config/database.rb","scroll":2,"cursor":{"row":8,"column":16}}]