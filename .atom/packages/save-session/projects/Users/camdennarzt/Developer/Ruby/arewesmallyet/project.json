[{"diskText":"(function () {\n  function limitDataPoints(plot) {\n    var minDistance = 0;\n\n    function getMinDistance(plot) {\n      var series = plot.getData();\n      var xaxis = plot.getAxes().xaxis;\n\n      var values = [];\n      var opts = xaxis.options;\n      var min = opts.min, max = opts.max;\n\n      if (!(min && max)) {\n        series.forEach(function (s) {\n          var count = 0;\n          s.data.forEach(function (d) {\n            d && values.push(d[0]);\n          });\n\n        });\n\n        min = min || Math.min.apply(Math, values);\n        max = max || Math.max.apply(Math, values);\n      }\n\n      var width = $(\"#graph\").width();\n      return 8 * (max - min) / width;\n    }\n\n    plot.hooks.processRawData.push(function (plot, series, data, datapoints) {\n      if (series == plot.getData()[0])\n        minDistance = getMinDistance(plot);\n\n      var lastDate;\n      var values;\n\n      for (var d = data.length - 1; d >= 0; d--) {\n        var date = data[d][0];\n        var value = data[d][1];\n\n        if (lastDate && date + minDistance > lastDate) {\n          data.splice(d, 1);\n          values.push(value);\n        } else {\n          if (lastDate) {\n            values.sort();\n            data[d + 1][1] = values[Math.floor(values.length / 2)];\n          }\n\n          lastDate = date;\n          values = [value];\n        }\n      }\n    });\n  }\n\n  function insertReleaseTicks(plot) {\n    plot.hooks.draw.push(function (plot, ctx) {\n      $(\".release\").remove();\n\n      var releaseDates = [\n        [\"2008-06-17\", \"3.0\"],\n        [\"2009-06-30\", \"3.5\"],\n        [\"2010-01-21\", \"3.6\"],\n        [\"2011-03-22\", \"4\"],\n        [\"2011-06-21\", \"5\"],\n        [\"2011-08-16\", \"6\"],\n        [\"2011-09-27\", \"7\"],\n        [\"2011-11-08\", \"8\"],\n        [\"2011-12-20\", \"9\"],\n        [\"2012-01-31\", \"10\"],\n        [\"2012-03-13\", \"11\"],\n        [\"2012-04-24\", \"12\"],\n        [\"2012-06-05\", \"13\"],\n        [\"2012-07-17\", \"14\"],\n        [\"2012-08-28\", \"15\"],\n        [\"2012-10-09\", \"16\"],\n        [\"2012-11-20\", \"17\"],\n        [\"2013-01-08\", \"18\"],\n        [\"2013-02-19\", \"19\"],\n        [\"2013-04-02\", \"20\"],\n        [\"2013-05-14\", \"21\"],\n        [\"2013-06-25\", \"22\"],\n        [\"2013-08-06\", \"23\"],\n        [\"2013-09-17\", \"24\"],\n        [\"2013-10-29\", \"25\"],\n        [\"2013-12-10\", \"26\"],\n        [\"2014-02-04\", \"27\"],\n        [\"2014-03-18\", \"28\"],\n        [\"2014-04-29\", \"29\"],\n        [\"2014-06-10\", \"30\"],\n        [\"2014-07-22\", \"31\"],\n        [\"2014-09-02\", \"32\"],\n        [\"2014-10-13\", \"33\"],\n        [\"2014-12-01\", \"34\"]//,\n//        [\"2015-01-\", \"35\"]//,\n//        [\"2015-02-\", \"36\"]//,\n      ];\n\n      ctx.save();\n\n      var off = plot.getPlotOffset();\n      ctx.translate(off.left, off.top);\n\n      ctx.strokeStyle = \"#888\";\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n\n      var xaxis = plot.getAxes().xaxis;\n      var plotHeight = plot.height();\n      var plotWidth = plot.width();\n\n      releaseDates.forEach(function (rdate) {\n        var x = xaxis.p2c(+new Date(rdate[0]));\n        rdate[0] = Math.floor(x) + 0.5;\n      });\n\n      releaseDates.forEach(function (rdate, index) {\n        var x = rdate[0];\n        var isLast = index + 1 >= releaseDates.length;\n        var nextx = isLast ? plotWidth : releaseDates[index + 1][0];\n        if (x >= plotWidth || (!isLast && nextx <= 0))\n          return;\n\n        if (x > 0 && x < plotWidth) {\n          ctx.moveTo(x, 0);\n          ctx.lineTo(x, plotHeight);\n        }\n\n        var label = $('<div class=\"release\"/>')\n          .text(rdate[1]).appendTo(\"#graph\");\n\n        var left = Math.max(0, x);\n        var right = Math.min(plotWidth, nextx);\n        var mid = left + ((right - left) / 2);\n        var labelmid = label.width() / 2;\n        label.css(\"left\", (off.left + Math.max(left, mid - labelmid)) + \"px\");\n      });\n\n      ctx.stroke();\n      ctx.restore();\n    });\n  }\n\n  $.plot.plugins.push({init: limitDataPoints});\n  $.plot.plugins.push({init: insertReleaseTicks});\n})();\n","text":"(function () {\n  function limitDataPoints(plot) {\n    var minDistance = 0;\n\n    function getMinDistance(plot) {\n      var series = plot.getData();\n      var xaxis = plot.getAxes().xaxis;\n\n      var values = [];\n      var opts = xaxis.options;\n      var min = opts.min, max = opts.max;\n\n      if (!(min && max)) {\n        series.forEach(function (s) {\n          var count = 0;\n          s.data.forEach(function (d) {\n            d && values.push(d[0]);\n          });\n\n        });\n\n        min = min || Math.min.apply(Math, values);\n        max = max || Math.max.apply(Math, values);\n      }\n\n      var width = $(\"#graph\").width();\n      return 8 * (max - min) / width;\n    }\n\n    plot.hooks.processRawData.push(function (plot, series, data, datapoints) {\n      if (series == plot.getData()[0])\n        minDistance = getMinDistance(plot);\n\n      var lastDate;\n      var values;\n\n      for (var d = data.length - 1; d >= 0; d--) {\n        var date = data[d][0];\n        var value = data[d][1];\n\n        if (lastDate && date + minDistance > lastDate) {\n          data.splice(d, 1);\n          values.push(value);\n        } else {\n          if (lastDate) {\n            values.sort();\n            data[d + 1][1] = values[Math.floor(values.length / 2)];\n          }\n\n          lastDate = date;\n          values = [value];\n        }\n      }\n    });\n  }\n\n  function insertReleaseTicks(plot) {\n    plot.hooks.draw.push(function (plot, ctx) {\n      $(\".release\").remove();\n\n      var releaseDates = [\n        [\"2008-06-17\", \"3.0\"],\n        [\"2009-06-30\", \"3.5\"],\n        [\"2010-01-21\", \"3.6\"],\n        [\"2011-03-22\", \"4\"],\n        [\"2011-06-21\", \"5\"],\n        [\"2011-08-16\", \"6\"],\n        [\"2011-09-27\", \"7\"],\n        [\"2011-11-08\", \"8\"],\n        [\"2011-12-20\", \"9\"],\n        [\"2012-01-31\", \"10\"],\n        [\"2012-03-13\", \"11\"],\n        [\"2012-04-24\", \"12\"],\n        [\"2012-06-05\", \"13\"],\n        [\"2012-07-17\", \"14\"],\n        [\"2012-08-28\", \"15\"],\n        [\"2012-10-09\", \"16\"],\n        [\"2012-11-20\", \"17\"],\n        [\"2013-01-08\", \"18\"],\n        [\"2013-02-19\", \"19\"],\n        [\"2013-04-02\", \"20\"],\n        [\"2013-05-14\", \"21\"],\n        [\"2013-06-25\", \"22\"],\n        [\"2013-08-06\", \"23\"],\n        [\"2013-09-17\", \"24\"],\n        [\"2013-10-29\", \"25\"],\n        [\"2013-12-10\", \"26\"],\n        [\"2014-02-04\", \"27\"],\n        [\"2014-03-18\", \"28\"],\n        [\"2014-04-29\", \"29\"],\n        [\"2014-06-10\", \"30\"],\n        [\"2014-07-22\", \"31\"],\n        [\"2014-09-02\", \"32\"],\n        [\"2014-10-13\", \"33\"],\n        [\"2014-12-01\", \"34\"]//,\n//        [\"2015-01-\", \"35\"]//,\n//        [\"2015-02-\", \"36\"]//,\n      ];\n\n      ctx.save();\n\n      var off = plot.getPlotOffset();\n      ctx.translate(off.left, off.top);\n\n      ctx.strokeStyle = \"#888\";\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n\n      var xaxis = plot.getAxes().xaxis;\n      var plotHeight = plot.height();\n      var plotWidth = plot.width();\n\n      releaseDates.forEach(function (rdate) {\n        var x = xaxis.p2c(+new Date(rdate[0]));\n        rdate[0] = Math.floor(x) + 0.5;\n      });\n\n      releaseDates.forEach(function (rdate, index) {\n        var x = rdate[0];\n        var isLast = index + 1 >= releaseDates.length;\n        var nextx = isLast ? plotWidth : releaseDates[index + 1][0];\n        if (x >= plotWidth || (!isLast && nextx <= 0))\n          return;\n\n        if (x > 0 && x < plotWidth) {\n          ctx.moveTo(x, 0);\n          ctx.lineTo(x, plotHeight);\n        }\n\n        var label = $('<div class=\"release\"/>')\n          .text(rdate[1]).appendTo(\"#graph\");\n\n        var left = Math.max(0, x);\n        var right = Math.min(plotWidth, nextx);\n        var mid = left + ((right - left) / 2);\n        var labelmid = label.width() / 2;\n        label.css(\"left\", (off.left + Math.max(left, mid - labelmid)) + \"px\");\n      });\n\n      ctx.stroke();\n      ctx.restore();\n    });\n  }\n\n  $.plot.plugins.push({init: limitDataPoints});\n  $.plot.plugins.push({init: insertReleaseTicks});\n})();\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/arewesmallyet/app/assets/javascripts/plugins.js","scroll":36.666666666666664,"cursor":{"row":93,"column":28}},{"diskText":"require_relative \"../lib/domainredirect.rb\"\n\nclass Arewesmallyet < Padrino::Application\n  register Padrino::Rendering\n  register Padrino::Pipeline\n  register Padrino::Helpers\n  register Padrino::Cache\n\n  use Rack::DomainRedirect, [\"arewesmallyet.dev\", \"localhost\"]\n\n  disable :caching\n  disable :sessions\n  disable :flash\n  set :haml, :format => :html5\n\n  get :index, :cache => true do\n    expires 3600 * 12\n    render :index\n  end\n\n  get :data, :cache => true, provides: :json do\n    expires 3600 * 12\n    @records = Record.order(:day).map do |r|\n      {r.day.to_s => JSON.parse(r.data)}\n    end.reduce({}, :merge!)\n    @records.to_json\n  end\n\n  get \"/*\", :priority => :low do\n    redirect \"/\"\n  end\n\n  configure_assets do |config|\n    config.pipeline = Padrino::Pipeline::Sprockets\n    config.prefix = '/public'\n  end\n\n  ##\n  # Caching support\n  #\n  # register Padrino::Cache\n  # enable :caching\n  #\n  # You can customize caching store engines:\n  #\n  #   set :cache, Padrino::Cache::Store::Memcache.new(::Memcached.new('127.0.0.1:11211', :exception_retry_limit => 1))\n  #   set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new('127.0.0.1:11211', :exception_retry_limit => 1))\n  #   set :cache, Padrino::Cache::Store::Redis.new(::Redis.new(:host => '127.0.0.1', :port => 6379, :db => 0))\n  #   set :cache, Padrino::Cache::Store::Memory.new(50)\n  #   set :cache, Padrino::Cache::Store::File.new(Padrino.root('tmp', app_name.to_s, 'cache')) # default choice\n  #\n\n  configure :production do\n    set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new(:exception_retry_limit => 1))\n  end\n\n  ##\n  # Application configuration options\n  #\n  # set :raise_errors, true       # Raise exceptions (will stop application) (default for test)\n  # set :dump_errors, true        # Exception backtraces are written to STDERR (default for production/development)\n  # set :show_exceptions, true    # Shows a stack trace in browser (default for development)\n  # set :logging, true            # Logging in STDOUT for development and file for production (default only for development)\n  # set :public_folder, \"foo/bar\" # Location for static assets (default root/public)\n  # set :reload, false            # Reload application files (default in development)\n  # set :default_builder, \"foo\"   # Set a custom form builder (default 'StandardFormBuilder')\n  # set :locale_path, \"bar\"       # Set path for I18n translations (default your_app/locales)\n  # disable :sessions             # Disabled sessions by default (enable if needed)\n  # disable :flash                # Disables sinatra-flash (enabled by default if Sinatra::Flash is defined)\n  # layout  :my_layout            # Layout can be in views/layouts/foo.ext or views/foo.ext (default :application)\n  #\n\n  ##\n  # You can configure for a specified environment like:\n  #\n  #   configure :development do\n  #     set :foo, :bar\n  #     disable :asset_stamp # no asset timestamping for dev\n  #   end\n  #\n\n  ##\n  # You can manage errors like:\n  #\n  #   error 404 do\n  #     render 'errors/404'\n  #   end\n  #\n  #   error 505 do\n  #     render 'errors/505'\n  #   end\n  #\nend\n","text":"require_relative \"../lib/domainredirect.rb\"\n\nclass Arewesmallyet < Padrino::Application\n  register Padrino::Rendering\n  register Padrino::Pipeline\n  register Padrino::Helpers\n  register Padrino::Cache\n\n  use Rack::DomainRedirect, [\"arewesmallyet.dev\", \"localhost\"]\n\n  disable :caching\n  disable :sessions\n  disable :flash\n  set :haml, :format => :html5\n\n  get :index, :cache => true do\n    expires 3600 * 12\n    render :index\n  end\n\n  get :data, :cache => true, provides: :json do\n    expires 3600 * 12\n    @records = Record.order(:day).map do |r|\n      {r.day.to_s => JSON.parse(r.data)}\n    end.reduce({}, :merge!)\n    @records.to_json\n  end\n\n  get \"/*\", :priority => :low do\n    redirect \"/\"\n  end\n\n  configure_assets do |config|\n    config.pipeline = Padrino::Pipeline::Sprockets\n    config.prefix = '/public'\n  end\n\n  ##\n  # Caching support\n  #\n  # register Padrino::Cache\n  # enable :caching\n  #\n  # You can customize caching store engines:\n  #\n  #   set :cache, Padrino::Cache::Store::Memcache.new(::Memcached.new('127.0.0.1:11211', :exception_retry_limit => 1))\n  #   set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new('127.0.0.1:11211', :exception_retry_limit => 1))\n  #   set :cache, Padrino::Cache::Store::Redis.new(::Redis.new(:host => '127.0.0.1', :port => 6379, :db => 0))\n  #   set :cache, Padrino::Cache::Store::Memory.new(50)\n  #   set :cache, Padrino::Cache::Store::File.new(Padrino.root('tmp', app_name.to_s, 'cache')) # default choice\n  #\n\n  configure :production do\n    set :cache, Padrino::Cache::Store::Memcache.new(::Dalli::Client.new(:exception_retry_limit => 1))\n  end\n\n  ##\n  # Application configuration options\n  #\n  # set :raise_errors, true       # Raise exceptions (will stop application) (default for test)\n  # set :dump_errors, true        # Exception backtraces are written to STDERR (default for production/development)\n  # set :show_exceptions, true    # Shows a stack trace in browser (default for development)\n  # set :logging, true            # Logging in STDOUT for development and file for production (default only for development)\n  # set :public_folder, \"foo/bar\" # Location for static assets (default root/public)\n  # set :reload, false            # Reload application files (default in development)\n  # set :default_builder, \"foo\"   # Set a custom form builder (default 'StandardFormBuilder')\n  # set :locale_path, \"bar\"       # Set path for I18n translations (default your_app/locales)\n  # disable :sessions             # Disabled sessions by default (enable if needed)\n  # disable :flash                # Disables sinatra-flash (enabled by default if Sinatra::Flash is defined)\n  # layout  :my_layout            # Layout can be in views/layouts/foo.ext or views/foo.ext (default :application)\n  #\n\n  ##\n  # You can configure for a specified environment like:\n  #\n  #   configure :development do\n  #     set :foo, :bar\n  #     disable :asset_stamp # no asset timestamping for dev\n  #   end\n  #\n\n  ##\n  # You can manage errors like:\n  #\n  #   error 404 do\n  #     render 'errors/404'\n  #   end\n  #\n  #   error 505 do\n  #     render 'errors/505'\n  #   end\n  #\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/arewesmallyet/app/app.rb","scroll":2,"cursor":{"row":28,"column":0}}]