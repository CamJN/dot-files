[{"diskText":"class ApplicationController < ActionController::Base\n  # Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\n  before_action :detect_browser_os_and_device\n  before_filter :configure_permitted_parameters, if: :devise_controller?\n\n  rescue_from CanCan::AccessDenied do |exception|\n    render(file: File.join(Rails.root, 'public/403.html'), status: :forbidden, layout: false)\n  end\n\n  def ping\n    filtered = request.env.select do |k,v| ['HTTP_USER_AGENT','REMOTE_ADDR'].include? k end\n      render json: filtered\n    end\n\n    protected\n\n    def configure_permitted_parameters\n      devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:username, :email, :password, :password_confirmation) }\n      devise_parameter_sanitizer.for(:sign_in) { |u| u.permit(:login, :username, :email, :password) }\n      devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:username, :email, :password, :password_confirmation, :current_password) }\n    end\n\n    private\n    \n    def detect_browser_os_and_device\n      case request.protocol\n      when /http/i\n        request.variant = [:http]\n      when /https/i\n        request.variant = [:https]\n      end\n\n      case request.user_agent\n      when /iPad/i\n        request.variant.push(:tablet)\n      when /iPhone/i || /Windows Phone/i\n        request.variant.push(:phone)\n      when /Android/i && /mobile/i\n        request.variant.push(:phone)\n      when /Android/i\n        request.variant.push(:tablet)\n      end\n      case request.user_agent\n      when /Android/i\n        request.variant.push(:android)\n      when /iPhone/i || /iPad/i\n        request.variant.push(:ios)\n      when /Windows/i\n        request.variant.push(:windows)\n      when /Macintosh/i || /MacOS/i || /Darwin/i\n        request.variant.push(:mac)\n      when /BSD/i\n        request.variant.push(:bsd)\n      when /Linux/i || /Ubuntu/i\n        request.variant.push(:linux)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberry)\n      when /CrOS/i\n        request.variant.push(:chromeos)\n      when /Firefox/i && /Mobile/i\n        request.variant.push(:firefoxos)\n      end\n      case request.user_agent\n      when /Chrome/i || /Chromium/i || /CrMo/i || /CriOS/i\n        request.variant.push(:chrome)\n      when /Firefox/i || /Fennec/i\n        request.variant.push(:firefox)\n      when /Safari/i && /Android/i\n        request.variant.push(:androidb)\n      when /Opera/i || /OPR/i || /Presto/i\n        request.variant.push(:opera)\n      when /MSIE/i || /Trident/i || /IE/i || /IEMobile/i\n        request.variant.push(:ie)\n      when /Safari/i || /iPhone/i || /iPad/i\n        request.variant.push(:safari)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberryb)\n      end\n    end\n  end\n","text":"class ApplicationController < ActionController::Base\n  # Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\n  before_action :detect_browser_os_and_device\n  before_filter :configure_permitted_parameters, if: :devise_controller?\n\n  rescue_from CanCan::AccessDenied do |exception|\n    render(file: File.join(Rails.root, 'public/403.html'), status: :forbidden, layout: false)\n  end\n\n  def ping\n    filtered = request.env.select do |k,v| ['HTTP_USER_AGENT','REMOTE_ADDR'].include? k end\n      render json: filtered\n    end\n\n    protected\n\n    def configure_permitted_parameters\n      devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:username, :email, :password, :password_confirmation) }\n      devise_parameter_sanitizer.for(:sign_in) { |u| u.permit(:login, :username, :email, :password) }\n      devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:username, :email, :password, :password_confirmation, :current_password) }\n    end\n\n    private\n    \n    def detect_browser_os_and_device\n      case request.protocol\n      when /http/i\n        request.variant = [:http]\n      when /https/i\n        request.variant = [:https]\n      end\n\n      case request.user_agent\n      when /iPad/i\n        request.variant.push(:tablet)\n      when /iPhone/i || /Windows Phone/i\n        request.variant.push(:phone)\n      when /Android/i && /mobile/i\n        request.variant.push(:phone)\n      when /Android/i\n        request.variant.push(:tablet)\n      end\n      case request.user_agent\n      when /Android/i\n        request.variant.push(:android)\n      when /iPhone/i || /iPad/i\n        request.variant.push(:ios)\n      when /Windows/i\n        request.variant.push(:windows)\n      when /Macintosh/i || /MacOS/i || /Darwin/i\n        request.variant.push(:mac)\n      when /BSD/i\n        request.variant.push(:bsd)\n      when /Linux/i || /Ubuntu/i\n        request.variant.push(:linux)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberry)\n      when /CrOS/i\n        request.variant.push(:chromeos)\n      when /Firefox/i && /Mobile/i\n        request.variant.push(:firefoxos)\n      end\n      case request.user_agent\n      when /Chrome/i || /Chromium/i || /CrMo/i || /CriOS/i\n        request.variant.push(:chrome)\n      when /Firefox/i || /Fennec/i\n        request.variant.push(:firefox)\n      when /Safari/i && /Android/i\n        request.variant.push(:androidb)\n      when /Opera/i || /OPR/i || /Presto/i\n        request.variant.push(:opera)\n      when /MSIE/i || /Trident/i || /IE/i || /IEMobile/i\n        request.variant.push(:ie)\n      when /Safari/i || /iPhone/i || /iPad/i\n        request.variant.push(:safari)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberryb)\n      end\n    end\n  end\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/blog/app/controllers/application_controller.rb","cursor":{"row":5,"column":72}},{"diskText":"class ArticlesController < ApplicationController\n  before_filter :authenticate_user!, except: [:index, :show]\n  load_and_authorize_resource\n\n  def destroy\n    if @article.destroy\n      redirect_to articles_path\n    else\n      render 'show'\n    end\n  end\n\n  def create\n    if @article.save\n      redirect_to @article\n    else\n      render 'new'\n    end\n  end\n\n  def update\n    if @article.update(article_params)\n      redirect_to @article\n    else\n      render 'edit'\n    end\n  end\n\n  private\n\n  def article_params\n    params.require(:article).permit(:title,:text)\n  end\n\nend\n","text":"class ArticlesController < ApplicationController\n  before_filter :authenticate_user!, except: [:index, :show]\n  load_and_authorize_resource\n\n  def destroy\n    if @article.destroy\n      redirect_to articles_path\n    else\n      render 'show'\n    end\n  end\n\n  def create\n    if @article.save\n      redirect_to @article\n    else\n      render 'new'\n    end\n  end\n\n  def update\n    if @article.update(article_params)\n      redirect_to @article\n    else\n      render 'edit'\n    end\n  end\n\n  private\n\n  def article_params\n    params.require(:article).permit(:title,:text)\n  end\n\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/blog/app/controllers/articles_controller.rb","cursor":{"row":0,"column":0}},{"diskText":"class CommentsController < ApplicationController\n  before_action :authenticate_user!\n  before_action :set_user, only: [:create]\n  load_and_authorize_resource :article\n  load_and_authorize_resource :comment, through: :article\n\n  def create\n    if not @comment.save\n      flash[:alert] = 'Comment '+ @comment.errors.messages[:body].first\n    end\n\n    redirect_to article_path(@article)\n  end\n\n  def destroy\n    @comment.destroy\n    if request.referer.nil?\n      redirect_to article_path(@article)\n    else\n      redirect_to :back\n    end\n  end\n\n  private\n  def comment_params\n    params.require(:comment).permit(:body,:user_id)\n  end\n  def set_user\n    params['comment']['user_id'] = current_user.id\n  end\nend\n","text":"class CommentsController < ApplicationController\n  before_action :authenticate_user!\n  before_action :set_user, only: [:create]\n  load_and_authorize_resource :article\n  load_and_authorize_resource :comment, through: :article\n\n  def create\n    if not @comment.save\n      flash[:alert] = 'Comment '+ @comment.errors.messages[:body].first\n    end\n\n    redirect_to article_path(@article)\n  end\n\n  def destroy\n    @comment.destroy\n    if request.referer.nil?\n      redirect_to article_path(@article)\n    else\n      redirect_to :back\n    end\n  end\n\n  private\n  def comment_params\n    params.require(:comment).permit(:body,:user_id)\n  end\n  def set_user\n    params['comment']['user_id'] = current_user.id\n  end\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/blog/app/controllers/comments_controller.rb","cursor":{"row":17,"column":18}}]