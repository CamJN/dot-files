[{"diskText":"<nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"/\">This One Blog</a>\n    </div>\n    <div class=\"collapse navbar-collapse\">\n      <%= render_navigation(expand_all: true, context: :menu) %>\n      <%= render_navigation(expand_all: true, context: :user) %>\n    </div>\n  </div>\n</nav>\n","text":"<nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"/\">This One Blog</a>\n    </div>\n    <div class=\"collapse navbar-collapse\">\n      <%= render_navigation(expand_all: true, context: :menu) %>\n      <%= render_navigation(expand_all: true, context: :user) %>\n    </div>\n  </div>\n</nav>\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/blog/app/views/layouts/_nav.html.erb","cursor":{"row":0,"column":0}},{"diskText":"# -*- coding: utf-8 -*-\n# Configures your navigation\nSimpleNavigation::Configuration.run do |navigation|\n\n  navigation.renderer = SimpleNavigation::Renderer::Bootstrap\n\n  navigation.items do |secondary|\n    secondary.item :user, user_signed_in?? current_user.login : 'Guest', '#' do |sub_nav|\n      if user_signed_in?\n        sub_nav.item :edit_profile, 'Edit profile', edit_user_registration_path\n        sub_nav.item :logout, 'Logout', destroy_user_session_path, method: :delete\n      else\n        sub_nav.item :sign_up, 'Sign up', new_user_registration_path\n        sub_nav.item :login, 'Login', new_user_session_path\n      end\n    end\n    secondary.dom_class = \"nav navbar-nav navbar-right\"\n    secondary.auto_highlight = false\n  end\nend\n","text":"# -*- coding: utf-8 -*-\n# Configures your navigation\nSimpleNavigation::Configuration.run do |navigation|\n\n  navigation.renderer = SimpleNavigation::Renderer::Bootstrap\n\n  navigation.items do |secondary|\n    secondary.item :user, user_signed_in?? current_user.login : 'Guest', '#' do |sub_nav|\n      if user_signed_in?\n        sub_nav.item :edit_profile, 'Edit profile', edit_user_registration_path\n        sub_nav.item :logout, 'Logout', destroy_user_session_path, method: :delete\n      else\n        sub_nav.item :sign_up, 'Sign up', new_user_registration_path\n        sub_nav.item :login, 'Login', new_user_session_path\n      end\n    end\n    secondary.dom_class = \"nav navbar-nav navbar-right\"\n    secondary.auto_highlight = false\n  end\nend\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/blog/config/navigations/user_navigation.rb","cursor":{"row":13,"column":38}},{"diskText":"class ApplicationController < ActionController::Base\n  # Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\n  before_action :detect_browser_os_and_device\n  before_filter :configure_permitted_parameters, if: :devise_controller?\n  before_filter :authenticate_user!, only: [:ping]\n\n  rescue_from CanCan::AccessDenied do |exception|\n    render(file: File.join(Rails.root, 'public/403.html'), status: :forbidden, layout: false)\n  end\n\n  def ping\n    filtered = request.env.select do |k,v| ['HTTP_USER_AGENT','REMOTE_ADDR'].include? k end\n      render json: filtered\n    end\n\n    protected\n\n    def configure_permitted_parameters\n      devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:username, :email, :password, :password_confirmation) }\n      devise_parameter_sanitizer.for(:sign_in) { |u| u.permit(:login, :username, :email, :password) }\n      devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:username, :email, :password, :password_confirmation, :current_password) }\n    end\n\n    private\n\n    def detect_browser_os_and_device\n      case request.protocol\n      when /http/i\n        request.variant = [:http]\n      when /https/i\n        request.variant = [:https]\n      end\n\n      case request.user_agent\n      when /iPad/i\n        request.variant.push(:tablet)\n      when /iPhone/i || /Windows Phone/i\n        request.variant.push(:phone)\n      when /Android/i && /mobile/i\n        request.variant.push(:phone)\n      when /Android/i\n        request.variant.push(:tablet)\n      end\n      case request.user_agent\n      when /Android/i\n        request.variant.push(:android)\n      when /iPhone/i || /iPad/i\n        request.variant.push(:ios)\n      when /Windows/i\n        request.variant.push(:windows)\n      when /Macintosh/i || /MacOS/i || /Darwin/i\n        request.variant.push(:mac)\n      when /BSD/i\n        request.variant.push(:bsd)\n      when /Linux/i || /Ubuntu/i\n        request.variant.push(:linux)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberry)\n      when /CrOS/i\n        request.variant.push(:chromeos)\n      when /Firefox/i && /Mobile/i\n        request.variant.push(:firefoxos)\n      end\n      case request.user_agent\n      when /Chrome/i || /Chromium/i || /CrMo/i || /CriOS/i\n        request.variant.push(:chrome)\n      when /Firefox/i || /Fennec/i\n        request.variant.push(:firefox)\n      when /Safari/i && /Android/i\n        request.variant.push(:androidb)\n      when /Opera/i || /OPR/i || /Presto/i\n        request.variant.push(:opera)\n      when /MSIE/i || /Trident/i || /IE/i || /IEMobile/i\n        request.variant.push(:ie)\n      when /Safari/i || /iPhone/i || /iPad/i\n        request.variant.push(:safari)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberryb)\n      end\n    end\n  end\n","text":"class ApplicationController < ActionController::Base\n  # Prevent CSRF attacks by raising an exception.\n  # For APIs, you may want to use :null_session instead.\n  protect_from_forgery with: :exception\n  before_action :detect_browser_os_and_device\n  before_action :configure_permitted_parameters, if: :devise_controller?\n  before_action :authenticate_user!, only: [:ping]\n\n  rescue_from CanCan::AccessDenied do |exception|\n    render(file: File.join(Rails.root, 'public/403.html'), status: :forbidden, layout: false)\n  end\n\n  def ping\n    filtered = request.env.select do |k,v| ['HTTP_USER_AGENT','REMOTE_ADDR'].include? k end\n      render json: filtered\n    end\n\n    protected\n\n    def configure_permitted_parameters\n      devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:username, :email, :password, :password_confirmation) }\n      devise_parameter_sanitizer.for(:sign_in) { |u| u.permit(:login, :username, :email, :password) }\n      devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:username, :email, :password, :password_confirmation, :current_password) }\n    end\n\n    private\n\n    def detect_browser_os_and_device\n      case request.protocol\n      when /http/i\n        request.variant = [:http]\n      when /https/i\n        request.variant = [:https]\n      end\n\n      case request.user_agent\n      when /iPad/i\n        request.variant.push(:tablet)\n      when /iPhone/i || /Windows Phone/i\n        request.variant.push(:phone)\n      when /Android/i && /mobile/i\n        request.variant.push(:phone)\n      when /Android/i\n        request.variant.push(:tablet)\n      end\n      case request.user_agent\n      when /Android/i\n        request.variant.push(:android)\n      when /iPhone/i || /iPad/i\n        request.variant.push(:ios)\n      when /Windows/i\n        request.variant.push(:windows)\n      when /Macintosh/i || /MacOS/i || /Darwin/i\n        request.variant.push(:mac)\n      when /BSD/i\n        request.variant.push(:bsd)\n      when /Linux/i || /Ubuntu/i\n        request.variant.push(:linux)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberry)\n      when /CrOS/i\n        request.variant.push(:chromeos)\n      when /Firefox/i && /Mobile/i\n        request.variant.push(:firefoxos)\n      end\n      case request.user_agent\n      when /Chrome/i || /Chromium/i || /CrMo/i || /CriOS/i\n        request.variant.push(:chrome)\n      when /Firefox/i || /Fennec/i\n        request.variant.push(:firefox)\n      when /Safari/i && /Android/i\n        request.variant.push(:androidb)\n      when /Opera/i || /OPR/i || /Presto/i\n        request.variant.push(:opera)\n      when /MSIE/i || /Trident/i || /IE/i || /IEMobile/i\n        request.variant.push(:ie)\n      when /Safari/i || /iPhone/i || /iPad/i\n        request.variant.push(:safari)\n      when /RIM/i || /Playbook/i || /BlackBerry/i || /BB10/i\n        request.variant.push(:blackberryb)\n      end\n    end\n  end\n","active":false,"path":"/Users/camdennarzt/Developer/Ruby/blog/app/controllers/application_controller.rb","cursor":{"row":6,"column":15}}]