#!/usr/local/bin/bash

function direct_math {
    echo "scale=4; $*" | \bc -l
}

function remac {
    sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport -z
    sudo ifconfig en0 ether "$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')"
    sudo networksetup -detectnewhardware
    ifconfig en0 | grep ether
}

function forward {
    local local=$1
    local server
    local remote

    if [[ $2 =~ .*:[0-9]+ ]]
    then
        server=$(echo "$2" | cut -f1 -d:)
        remote=$(echo "$2" | cut -f2 -d:)
    else
        server=$2
        remote=$3
    fi
    \ssh -NL "$local:localhost:$remote" "$server"
}

function csudo {
    local login

    while getopts 'Aa:BbC:c:D:Eeg:Hh::iKklnPp:r:SsT:t:U:u:Vv' opt
    do
        # shellcheck disable=SC2220,SC2213
        case $opt in
            i) login=true ;;
        esac
    done

    # shellcheck disable=SC2199
    if [[ ${login:-false} == "true" || ${@: $OPTIND:1} == su ]]; then
        read -rp "Did you want sudo -s? [Yn] " yn
        case $yn in
            [Nn]* ) \sudo "$@";;
            * ) \sudo -s ;;
        esac
    elif [[ ${@: $OPTIND:1} == echo ]]; then
        echo "You probably want echo | sudo tee" >&2
        \sudo -v
        builtin echo "${@: (($OPTIND+1))}"
    else
        \sudo "$@"
    fi
}

function cscp {
    if echo "$@" | xargs getopt '346BCpqrTvc:F:i:J:l:o:P:S:' -- | { read -r c; [[ "${c}" =~ --\ .*:.*\ .*:.* ]]; }; then
        # 2 remotes, cannot use rsync, try: https://unix.stackexchange.com/questions/183504/how-to-rsync-files-between-two-remotes
        \scp -3 "$@"
    else
        # shellcheck disable=SC2034
        local RSYNC_RSH="/usr/bin/ssh -oRequestTTY=no -oRemoteCommand=none"
        until rsync -aLvz --append-verify --partial --progress --timeout=10 "$@"; do sleep 1; echo retrying; done
    fi
}

function cps {
    if [ $# == 1 ]; then
        pgrep -fil "$1"
    else
        ps "$@"
    fi
}

function cfind {
    if [ "$(uname)" = "Darwin" ]; then
        find -x "$@"
    else
        #handle multiple search locations
        PLACE="$1"
        shift 1
        find "$PLACE" -xdev "$@"
    fi
}

function cdiff {
    if hash git &>/dev/null; then
        git diff --no-index --color-words "$@"
    else
        diff "$@"
    fi
}

function ramdrive {
    # diskutil erasevolume HFS+ 'ramdisk' $(hdiutil attach -nomount ram://$(echo '4 * 1024 ^ 3 / 512' | bc)) 2>/dev/null
    diskutil partitionDisk "$(hdiutil attach -nomount "ram://$(echo '4 * 1024 ^ 3 / 512' | bc)")" 1 GPTFormat APFS 'ramdisk' '100%'
}

function clocate {
    if [ "$(uname)" = "Darwin" ]; then
        mdfind "name:$*"
    else
        cdllocate "$*"
    fi
}

function csed {
    if [ "$(uname)" = "Darwin" ]; then
        sed -E "$@"
    else
        sed -r "$*"
    fi
}

function colors {
    for i in {0..31} ; do
        for j in {0..7} ; do
            printf "[7;(38;05;%d)mColor %-3d[0m\t" $((i + j * 32)) $((i + j * 32))
        done;
        echo ''
    done;
    echo -n "[0m"
}

function loveSongsForCamden {
    options_found=0
    while getopts ':vn:N:' OPT; do
        options_found=1
        # shellcheck disable=SC2214
        case $OPT in
            v|+v)
                mdfind kind:music album:camden | sort -nt / -k+11 | while read -r line; do printf "\n %s" "$line"; afplay "$line"; done &
                ;;
            n|+n)
                mdfind kind:music album:camden | sort -nt / -k+11 | grep -E --color='never' "/$OPTARG-.*$" | while read -r line; do afplay "$line"; done &
                ;;
            N|+N)
                shift $(( OPTIND - 1 ))
                OPTIND=1
                mdfind kind:music album:camden | sort -nt / -k+11 | grep -E --color='never' -i "[^/]*$*[^/]*/[^/]*$" | while read -r line; do afplay "$line"; done &
                ;;
            *)
                echo "usage: ${0##*/} [+-vn album-number] +-N album name"
                return 2
        esac
    done
    if ((!options_found));then
        mdfind kind:music album:camden | sort -nt / -k+11 | while read -r line; do afplay "$line"; done &
    fi
}

function regex_quote() {
    sed 's/[][\.|$(){}?+*^]/\\&/g' <<< "$*"
}

# shellcheck disable=SC2164
function chdir {
    if [ $# -eq 2 ]; then
        # use -b to go up the stack
        if [ "$1" != '-b' ]; then
            # $1 is set back to it's own value, $2 is set to how many dirs to go up to
            # The number to go up to is calculated from left of path: ~/a = 1, ~/a/b = 2
            set -- "$1" "$(bc "($(tr -dc '/' <<< "${PWD//$HOME/\~}" | wc -c) + 1) - $2")"
        fi
        pushd "$(cut -d / -f "1-$2" <<< "${PWD//$HOME/\~}" | sed -e "s|\~|$HOME|" )"
    elif [ -n "$1" ]; then
        # check $DIRSTACK if new dir is in there, if so change to it instead
        local CHANGETO="$(dirs -l -p -v | grep -Ex -m 1 -e "\s*[0-9]+\s+$(regex_quote ${1//\~/$HOME})" | cut -w -f 2)"
        if [[ -n "$CHANGETO" ]]; then
            pushd "+$CHANGETO"
        else
            pushd "${@//\~\?/$HOME/}";
        fi
    else
        pushd ~
    fi
}

function ccalendar {
    echo 'Today in history:'
    if [ "$TERM" != 'dumb' ]; then
        calendar 2>/dev/null | awk '{printf "%s %s",$1,$2; $1=$2=""; print "\t[0;38;5;122m"$0"[0m"}'
    else
        calendar 2>/dev/null | awk '{printf "%s %s",$1,$2; $1=$2=""; print "\t[0;36m"$0"[0m"}'
    fi
}

function getIp {
    if [ $# -gt 0 ]; then
        if [ "$1" = "-6" ]; then
            getIpv6
        elif [ "$1" = "-4" ]; then
            getIpv4
        else
            echo "Usage: getIp [-4] [-6]"
        fi
    else
        getIpv4
    fi
}

function getIpv4 {
    getIpv 4
}

function getIpv6 {
    getIpv 6
}

function getIpv {
    # dig +short myip.opendns.com @resolver1.opendns.com
    \curl "-$1" -s http://icanhazip.com/s
}

function mailIpTo {
    getIp -4 | mail -s "$(whoami)'s IP update" -F camden.narzt@gmail.com
}

function zipup {
    zip -r "$1" "$1"
    mv "$1.zip" ../
}

function cnotify {
    osascript -e 'on run argv
      set AppleScript'\''s text item delimiters to " "
      display notification (argv as string) with title "Terminal"
    end run' "$@"
}

function fplay {
    TYPEREGEX='.*\.(3g[2|p]|a(ac|c3|dts|if[c|f]?|mr|nd|u)|caf|m4[a|r]|mp([1-4|a]|eg[0,9]?)|sd2|wav)'
    DOAPPLESCRIPT=0
    APPLESCRIPTPART1='tell application "QuickTime Player" to delay 1'
    APPLESCRIPTPART2='tell application "QuickTime Player" to play the first document'
    MUSICROOT=~/Music/
    OUTPUT1="/dev/null"
    OUTPUT2="/dev/null"
    AUTHOR=""
    ALBUM=""
    NAME=""
    PLAY=1
    INFO=0
    options_found=0
    while getopts ":sd:hgia:A:o:v" OPTION
    do
        options_found=1
        # shellcheck disable=SC2214
        case $OPTION in
            d|+d)
                MUSICROOT="$OPTARG"
                ;;
            g|+g)
                DOAPPLESCRIPT=1
                ;;
            s|+s)
                PLAY=0
                ;;
            i|+i)
                INFO=1
                ;;
            a|+a)
                AUTHOR="AND author:$OPTARG"
                ;;
            A|+A)
                ALBUM="AND album:$OPTARG"
                ;;
            o|+o)
                OUTPUT2="$OPTARG"
                ;;
            v|+v)
                OUTPUT1="/dev/stdout"
                ;;
            h|+h)
                echo "usage: ${0##*/} [+-vshgi] [+-d music-directory] [+-a album] [+-A artist] [+-o playlist] [--] search terms..."
                return
                ;;
            *)
                echo "usage: ${0##*/} [+-vshgi] [+-d music-directory] [+-a album] [+-A artist] [+-o playlist] [--] search terms..."
                return 2
                ;;
        esac
    done
    shift $((OPTIND-1))
    OPTIND=1
    if [ "$#" -gt "0" ]; then
        NAME="AND name:$*"
    fi
    if [[ ( -n $NAME ) || ((options_found -eq 1)) ]]; then
        mdfind -onlyin "$MUSICROOT" '(kind:music OR kind:movie)' "$NAME" "$AUTHOR" "$ALBUM" |
            grep -E --color=auto "$TYPEREGEX" |
            while read -r line; do
                echo "$line" | tee -a "$OUTPUT2" > "$OUTPUT1"
                if ((INFO)); then
                    afinfo "$line"
                fi
                if ((DOAPPLESCRIPT)); then
                    open -a 'QuickTime Player' "$line"
                    if ((PLAY)); then
                        osascript -e "$APPLESCRIPTPART1"
                        osascript -e "$APPLESCRIPTPART2"
                    fi
                elif ((PLAY)); then
                    # to get fplay to print the song names neatly, have it spawn a process that uses bash "wait" to wait for everything else to finish before echoing.

                    # not sure how to avoid it waiting for it's parent.
                    afplay "$line"
                fi
            done
    fi
}

function ccal {

    cat >/tmp/FileWithDates <<EOF
EOD
10 31
4 25
2 14
2 2
EOD
EOF

    cal -y | awk -v month="$(date +%m)" -v day="$(date +%e) " '
BEGIN {
    max=0
    sub(/^0/,"",month)
    months[max] = month + 0
    days[max]   = day + 0
    max++
}

NR == FNR {
    months[max] = $1 + 0
    days[max]   = $2 + 0
    max++
    next
}

{   m = (int((FNR-3)/8) * 3) + 1
    for (i=0; i<3; i++) {
        t[i] = " " substr($0,1+i*22,20) " "
         for(j=0; j < max; j++) {
            if (m+i == months[j]) {
                sub(" "days[j]" ",":"days[j]"@",t[i])
            }
        }
        gsub(/:/," \033[0;31m",t[i])
        gsub(/@/,"\033[0m ",t[i])
    }
    print t[0],t[1],t[2]
} ' /tmp/FileWithDates -
}

function unix {
    date -r "$1"
}

function password {
    op create item login title="$*" --generate-password
}

function getPasswordFor {
    op get item "$*" --fields password
}

function getUsernameFor {
    op get item "$*" --fields username
}

function ctar {
    local CREATE
    local FILE

    while getopts 'aBb:C:cf:HhI:JjkLlmnOoPpqrSs:T:tUuvW:wX:xyZz' opt
    do
        # shellcheck disable=SC2220,SC2213
        case $opt in
            c) CREATE=true ;;
            f) FILE=$OPTARG ;;
        esac
    done

    if ! [[ ${CREATE:-false} == "true" ]]; then
        tar "$@"
    else
        if ! [[ "${FILE:-x}" =~ .*\.t?gz ]]; then
            set -- "${*/.tar/.tgz}"
        fi
        tar "${@: 1:$((OPTIND -1))}" --use-compress-program pigz "${@: $OPTIND}"
    fi
}

function cpbcopy {
    if [ $# -ge 1 ]; then
        pbcopy < "$*"
    else
        pbcopy
    fi
}

function checkIsDistro {
    docker pull "$1:$2" &>/dev/null
}

function checkIsUbuntu {
    checkIsDistro ubuntu "$1"
}

function checkIsDebian {
    checkIsDistro debian "$1"
}

function checkIsCentOS {
    checkIsDistro centos "$1"
}

function checkIsFedora {
    checkIsDistro fedora "$1"
}

function checkIsRHEL {
    checkIsDistro "registry.access.redhat.com/$1/${1%%[0-9]*[0-9]}" latest || checkIsDistro "registry.access.redhat.com/${1/rhel/ubi}/ubi" latest
}

function makeRHELArgs {
    local RHEL_ID=nkxqcwvnljffnae3ewas2s3afq
    # shellcheck disable=SC2155
    local RHEL_USERNAME=$(getUsernameFor $RHEL_ID)
    # shellcheck disable=SC2155
    local RHEL_PASSWORD=$(getPasswordFor $RHEL_ID)
    local c1="subscription-manager register --username '$RHEL_USERNAME' --password '$RHEL_PASSWORD' --auto-attach"
    # shellcheck disable=SC2016
    local c2='yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(< /etc/redhat-release tr -dc "0-9." | cut -d \. -f1).noarch.rpm'
    local c3="yum-config-manager --enable epel"
    local -n largs=$1
    largs=("$c1" '&&' "$c2" '&&' "$c3")
}

function cdocker {
    local IMAGE
    local args=('-l')
    if [[ "$1" == *:* ]]; then
        IMAGE="$1"
    elif checkIsUbuntu "$1"; then
        IMAGE="ubuntu:$1"
    elif checkIsDebian "$1"; then
        IMAGE="debian:$1"
    elif checkIsCentOS "$1"; then
        IMAGE="centos:$1"
    elif checkIsCentOS "${1/el/centos}"; then
        IMAGE="centos:${1/el/centos}"
    elif checkIsFedora "$1"; then
        IMAGE="fedora:$1"
    elif checkIsRHEL "$1"; then
        local version=${1##[a-z]*[a-z]}
        if [[ ${version:-8} -ge 8 ]]; then
            IMAGE="registry.access.redhat.com/ubi${version}/ubi"
        else
            IMAGE="registry.access.redhat.com/rhel${version}/rhel"
        fi

        makeRHELArgs args
    else
        echo "Couldn't find proper distro for $1"
        return 1
    fi

    docker run -it  --security-opt seccomp=unconfined "$IMAGE" bash --init-file <(echo "${args[*]}")
}

function csoftwareupdate {
    softwareupdate -l |\
        grep -F Label |\
        awk -F': ' 'BEGIN { ORS = "\0" } ; {print $2}' |\
        xargs -0 -I {} softwareupdate -d '{}'
}

function postgresql-upgrade-database {
    if [ $# -lt 2 ] || [ $1 -eq $2 ]; then
        echo "Usage: brew postgresql-upgrade-database 14 16" >&2
        return -1
    fi
    if [ $1 -lt $2 ]; then
        local V1=postgresql@$1
        local V2=postgresql@$2
    else
        local V1=postgresql@$2
        local V2=postgresql@$1
    fi
    $(brew --prefix $V2)/bin/pg_upgrade -b $(brew --prefix $V1)/bin -d $(brew --prefix)/var/$V1 -D $(brew --prefix )/var/$V2
}

function vergte() {
    echo -e "$1\n$2" | sort -rCV
}
